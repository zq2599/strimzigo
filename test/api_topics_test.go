/*
Strimzi Kafka Bridge API Reference

Testing TopicsApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/zq2599/strimzigo"
)

func Test_openapi_TopicsApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test TopicsApiService GetOffsets", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var topicname string
		var partitionid int32

		resp, httpRes, err := apiClient.TopicsApi.GetOffsets(context.Background(), topicname, partitionid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TopicsApiService GetPartition", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var topicname string
		var partitionid int32

		resp, httpRes, err := apiClient.TopicsApi.GetPartition(context.Background(), topicname, partitionid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TopicsApiService GetTopic", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var topicname string

		resp, httpRes, err := apiClient.TopicsApi.GetTopic(context.Background(), topicname).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TopicsApiService ListPartitions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var topicname string

		resp, httpRes, err := apiClient.TopicsApi.ListPartitions(context.Background(), topicname).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TopicsApiService ListTopics", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.TopicsApi.ListTopics(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TopicsApiService Send", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var topicname string

		resp, httpRes, err := apiClient.TopicsApi.Send(context.Background(), topicname).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TopicsApiService SendToPartition", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var topicname string
		var partitionid int32

		resp, httpRes, err := apiClient.TopicsApi.SendToPartition(context.Background(), topicname, partitionid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
