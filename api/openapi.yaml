openapi: 3.0.0
info:
  description: 'The Strimzi Kafka Bridge provides a REST API for integrating HTTP
    based client applications with a Kafka cluster. You can use the API to create
    and manage consumers and send and receive records over HTTP rather than the native
    Kafka protocol. '
  title: Strimzi Kafka Bridge API Reference
  version: 0.1.0
servers:
- url: /
tags:
- description: "Consumer operations to create consumers in your Kafka cluster and\
    \ perform common actions, such as subscribing to topics, retrieving processed\
    \ records, and committing offsets."
  name: Consumers
- description: "Topic operations to send messages to a specified topic or topic partition,\
    \ optionally including message keys in requests. You can also retrieve topics\
    \ and topic metadata."
  name: Topics
- description: Seek operations that enable a consumer to begin receiving messages
    from a given offset position.
  name: Seek
- description: Producer operations to send records to a specified topic or topic partition.
  name: Producer
paths:
  /consumers/{groupid}:
    post:
      description: Creates a consumer instance in the given consumer group. You can
        optionally specify a consumer name and supported configuration options. It
        returns a base URI which must be used to construct URLs for subsequent requests
        against this consumer instance.
      operationId: createConsumer
      parameters:
      - description: ID of the consumer group in which to create the consumer.
        explode: false
        in: path
        name: groupid
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/vnd.kafka.v2+json:
            schema:
              $ref: '#/components/schemas/Consumer'
        description: "Name and configuration of the consumer. The name is unique within\
          \ the scope of the consumer group. If a name is not specified, a randomly\
          \ generated name is assigned. All parameters are optional. The supported\
          \ configuration options are shown in the following example."
        required: false
      responses:
        "200":
          content:
            application/vnd.kafka.v2+json:
              examples:
                response:
                  value:
                    instance_id: consumer1
                    base_uri: http://localhost:8080/consumers/my-group/instances/consumer1
              schema:
                $ref: '#/components/schemas/CreatedConsumer'
          description: Consumer created successfully.
        "409":
          content:
            application/vnd.kafka.v2+json:
              examples:
                response:
                  value:
                    error_code: 409
                    message: A consumer instance with the specified name already exists
                      in the Kafka Bridge.
              schema:
                $ref: '#/components/schemas/Error'
          description: A consumer instance with the specified name already exists
            in the Kafka Bridge.
        "422":
          content:
            application/vnd.kafka.v2+json:
              examples:
                response:
                  value:
                    error_code: 422
                    message: One or more consumer configuration options have invalid
                      values.
              schema:
                $ref: '#/components/schemas/Error'
          description: One or more consumer configuration options have invalid values.
      tags:
      - Consumers
  /consumers/{groupid}/instances/{name}/positions/beginning:
    post:
      description: Configures a subscribed consumer to seek (and subsequently read
        from) the first offset in one or more given topic partitions.
      operationId: seekToBeginning
      parameters:
      - description: ID of the consumer group to which the subscribed consumer belongs.
        explode: false
        in: path
        name: groupid
        required: true
        schema:
          type: string
        style: simple
      - description: Name of the subscribed consumer.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/vnd.kafka.v2+json:
            schema:
              $ref: '#/components/schemas/Partitions'
        description: List of topic partitions to which the consumer is subscribed.
          The consumer will seek the first offset in the specified partitions.
        required: true
      responses:
        "204":
          description: Seek to the beginning performed successfully.
        "404":
          content:
            application/vnd.kafka.v2+json:
              examples:
                response:
                  value:
                    error_code: 404
                    message: The specified consumer instance was not found.
              schema:
                $ref: '#/components/schemas/Error'
          description: "The specified consumer instance was not found, or the specified\
            \ consumer instance did not have one of the specified partitions assigned."
      tags:
      - Seek
      - Consumers
  /consumers/{groupid}/instances/{name}/positions/end:
    post:
      description: Configures a subscribed consumer to seek (and subsequently read
        from) the offset at the end of one or more of the given topic partitions.
      operationId: seekToEnd
      parameters:
      - description: ID of the consumer group to which the subscribed consumer belongs.
        explode: false
        in: path
        name: groupid
        required: true
        schema:
          type: string
        style: simple
      - description: Name of the subscribed consumer.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/vnd.kafka.v2+json:
            schema:
              $ref: '#/components/schemas/Partitions'
        description: List of topic partitions to which the consumer is subscribed.
          The consumer will seek the last offset in the specified partitions.
        required: true
      responses:
        "204":
          description: Seek to the end performed successfully.
        "404":
          content:
            application/vnd.kafka.v2+json:
              examples:
                response:
                  value:
                    error_code: 404
                    message: The specified consumer instance was not found.
              schema:
                $ref: '#/components/schemas/Error'
          description: "The specified consumer instance was not found, or the specified\
            \ consumer instance did not have one of the specified partitions assigned."
      tags:
      - Seek
      - Consumers
  /consumers/{groupid}/instances/{name}/subscription:
    delete:
      description: Unsubscribes a consumer from all topics.
      operationId: unsubscribe
      parameters:
      - description: ID of the consumer group to which the subscribed consumer belongs.
        explode: false
        in: path
        name: groupid
        required: true
        schema:
          type: string
        style: simple
      - description: Name of the consumer to unsubscribe from topics.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: Consumer unsubscribed successfully.
        "404":
          content:
            application/json:
              examples:
                response:
                  value:
                    error_code: 404
                    message: The specified consumer instance was not found.
              schema:
                $ref: '#/components/schemas/Error'
          description: The specified consumer instance was not found.
      tags:
      - Consumers
    get:
      description: Retrieves a list of the topics to which the consumer is subscribed.
      operationId: listSubscriptions
      parameters:
      - description: ID of the consumer group to which the subscribed consumer belongs.
        explode: false
        in: path
        name: groupid
        required: true
        schema:
          type: string
        style: simple
      - description: Name of the subscribed consumer.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/vnd.kafka.v2+json:
              schema:
                $ref: '#/components/schemas/SubscribedTopicList'
          description: List of subscribed topics and partitions.
        "404":
          content:
            application/vnd.kafka.v2+json:
              examples:
                response:
                  value:
                    error_code: 404
                    message: The specified consumer instance was not found.
              schema:
                $ref: '#/components/schemas/Error'
          description: The specified consumer instance was not found.
      tags:
      - Consumers
    post:
      description: Subscribes a consumer to one or more topics. You can describe the
        topics to which the consumer will subscribe in a list (of `Topics` type) or
        as a `topic_pattern` field. Each call replaces the subscriptions for the subscriber.
      operationId: subscribe
      parameters:
      - description: ID of the consumer group to which the subscribed consumer belongs.
        explode: false
        in: path
        name: groupid
        required: true
        schema:
          type: string
        style: simple
      - description: Name of the consumer to subscribe to topics.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/vnd.kafka.v2+json:
            schema:
              $ref: '#/components/schemas/Topics'
        description: List of topics to which the consumer will subscribe.
        required: true
      responses:
        "204":
          description: Consumer subscribed successfully.
        "404":
          content:
            application/vnd.kafka.v2+json:
              examples:
                response:
                  value:
                    error_code: 404
                    message: The specified consumer instance was not found.
              schema:
                $ref: '#/components/schemas/Error'
          description: The specified consumer instance was not found.
        "409":
          content:
            application/vnd.kafka.v2+json:
              examples:
                response:
                  value:
                    error_code: 409
                    message: "Subscriptions to topics, partitions, and patterns are\
                      \ mutually exclusive."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Subscriptions to topics, partitions, and patterns are mutually\
            \ exclusive."
        "422":
          content:
            application/vnd.kafka.v2+json:
              examples:
                response:
                  value:
                    error_code: 422
                    message: A list (of Topics type) or a topic_pattern must be specified.
              schema:
                $ref: '#/components/schemas/Error'
          description: A list (of `Topics` type) or a `topic_pattern` must be specified.
      tags:
      - Consumers
  /consumers/{groupid}/instances/{name}/positions:
    post:
      description: Configures a subscribed consumer to fetch offsets from a particular
        offset the next time it fetches a set of records from a given topic partition.
        This overrides the default fetch behavior for consumers. You can specify one
        or more topic partitions.
      operationId: seek
      parameters:
      - description: ID of the consumer group to which the consumer belongs.
        explode: false
        in: path
        name: groupid
        required: true
        schema:
          type: string
        style: simple
      - description: Name of the subscribed consumer.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/vnd.kafka.v2+json:
            schema:
              $ref: '#/components/schemas/OffsetCommitSeekList'
        description: List of partition offsets from which the subscribed consumer
          will next fetch records.
        required: true
      responses:
        "204":
          description: Seek performed successfully.
        "404":
          content:
            application/vnd.kafka.v2+json:
              examples:
                response:
                  value:
                    error_code: 404
                    message: The specified consumer instance was not found.
              schema:
                $ref: '#/components/schemas/Error'
          description: "The specified consumer instance was not found, or the specified\
            \ consumer instance did not have one of the specified partitions assigned."
      tags:
      - Seek
      - Consumers
  /consumers/{groupid}/instances/{name}/assignments:
    post:
      description: Assigns one or more topic partitions to a consumer.
      operationId: assign
      parameters:
      - description: ID of the consumer group to which the consumer belongs.
        explode: false
        in: path
        name: groupid
        required: true
        schema:
          type: string
        style: simple
      - description: Name of the consumer to assign topic partitions to.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/vnd.kafka.v2+json:
            schema:
              $ref: '#/components/schemas/Partitions'
        description: List of topic partitions to assign to the consumer.
        required: true
      responses:
        "204":
          description: Partitions assigned successfully.
        "404":
          content:
            application/vnd.kafka.v2+json:
              examples:
                response:
                  value:
                    error_code: 404
                    message: The specified consumer instance was not found.
              schema:
                $ref: '#/components/schemas/Error'
          description: The specified consumer instance was not found.
        "409":
          content:
            application/vnd.kafka.v2+json:
              examples:
                response:
                  value:
                    error_code: 409
                    message: "Subscriptions to topics, partitions, and patterns are\
                      \ mutually exclusive."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Subscriptions to topics, partitions, and patterns are mutually\
            \ exclusive."
      tags:
      - Consumers
  /topics:
    get:
      description: Retrieves a list of all topics.
      operationId: listTopics
      responses:
        "200":
          content:
            application/vnd.kafka.v2+json:
              schema:
                items:
                  type: string
                type: array
          description: List of topics.
      tags:
      - Topics
  /topics/{topicname}:
    get:
      description: Retrieves the metadata about a given topic.
      operationId: getTopic
      parameters:
      - description: Name of the topic to send records to or retrieve metadata from.
        explode: false
        in: path
        name: topicname
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/vnd.kafka.v2+json:
              schema:
                $ref: '#/components/schemas/TopicMetadata'
          description: Topic metadata
        "404":
          content:
            application/vnd.kafka.v2+json:
              examples:
                response:
                  value:
                    error_code: 404
                    message: The specified topic was not found.
              schema:
                $ref: '#/components/schemas/Error'
          description: The specified topic was not found.
      tags:
      - Topics
    post:
      description: "Sends one or more records to a given topic, optionally specifying\
        \ a partition, key, or both."
      operationId: send
      parameters:
      - description: Name of the topic to send records to or retrieve metadata from.
        explode: false
        in: path
        name: topicname
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/vnd.kafka.json.v2+json:
            schema:
              $ref: '#/components/schemas/ProducerRecordList'
          application/vnd.kafka.binary.v2+json:
            schema:
              $ref: '#/components/schemas/ProducerRecordList'
        required: true
      responses:
        "200":
          content:
            application/vnd.kafka.v2+json:
              examples:
                response:
                  value:
                    offsets:
                    - partition: 2
                      offset: 0
                    - partition: 1
                      offset: 1
                    - partition: 2
                      offset: 2
              schema:
                $ref: '#/components/schemas/OffsetRecordSentList'
          description: Records sent successfully.
        "404":
          content:
            application/vnd.kafka.v2+json:
              examples:
                response:
                  value:
                    error_code: 404
                    message: The specified topic was not found.
              schema:
                $ref: '#/components/schemas/Error'
          description: The specified topic was not found.
        "422":
          content:
            application/vnd.kafka.v2+json:
              examples:
                response:
                  value:
                    error_code: 422
                    message: The record list contains invalid records.
              schema:
                $ref: '#/components/schemas/Error'
          description: The record list is not valid.
      tags:
      - Topics
      - Producer
  /consumers/{groupid}/instances/{name}/records:
    get:
      description: "Retrieves records for a subscribed consumer, including message\
        \ values, topics, and partitions. The request for this operation MUST use\
        \ the base URL (including the host and port) returned in the response from\
        \ the `POST` request to `/consumers/{groupid}` that was used to create this\
        \ consumer."
      operationId: poll
      parameters:
      - description: ID of the consumer group to which the subscribed consumer belongs.
        explode: false
        in: path
        name: groupid
        required: true
        schema:
          type: string
        style: simple
      - description: Name of the subscribed consumer to retrieve records from.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      - description: "The maximum amount of time, in milliseconds, that the HTTP Bridge\
          \ spends retrieving records before timing out the request."
        explode: true
        in: query
        name: timeout
        required: false
        schema:
          type: integer
        style: form
      - description: "The maximum size, in bytes, of unencoded keys and values that\
          \ can be included in the response. Otherwise, an error response with code\
          \ 422 is returned."
        explode: true
        in: query
        name: max_bytes
        required: false
        schema:
          type: integer
        style: form
      responses:
        "200":
          content:
            application/vnd.kafka.json.v2+json:
              examples:
                response:
                  value:
                  - topic: topic
                    key: key1
                    value:
                      foo: bar
                    partition: 0
                    offset: 2
                  - topic: topic
                    key: key2
                    value:
                    - foo2
                    - bar2
                    partition: 1
                    offset: 3
              schema:
                $ref: '#/components/schemas/ConsumerRecordList'
            application/vnd.kafka.binary.v2+json:
              examples:
                response:
                  value: |-
                    [
                      {
                        "topic": "test",
                        "key": "a2V5",
                        "value": "Y29uZmx1ZW50",
                        "partition": 1,
                        "offset": 100,
                      },
                      {
                        "topic": "test",
                        "key": "a2V5",
                        "value": "a2Fma2E=",
                        "partition": 2,
                        "offset": 101,
                      }
                    ]
              schema:
                $ref: '#/components/schemas/ConsumerRecordList'
            application/vnd.kafka.v2+json:
              schema:
                $ref: '#/components/schemas/ConsumerRecordList'
          description: Poll request executed successfully.
        "404":
          content:
            application/vnd.kafka.json.v2+json:
              schema:
                $ref: '#/components/schemas/Error'
            application/vnd.kafka.binary.v2+json:
              schema:
                $ref: '#/components/schemas/Error'
            application/vnd.kafka.v2+json:
              examples:
                response:
                  value:
                    error_code: 404
                    message: The specified consumer instance was not found.
              schema:
                $ref: '#/components/schemas/Error'
          description: The specified consumer instance was not found.
        "406":
          content:
            application/vnd.kafka.json.v2+json:
              schema:
                $ref: '#/components/schemas/Error'
            application/vnd.kafka.binary.v2+json:
              schema:
                $ref: '#/components/schemas/Error'
            application/vnd.kafka.v2+json:
              examples:
                response:
                  value:
                    error_code: 406
                    message: The `format` used in the consumer creation request does
                      not match the embedded format in the Accept header of this request.
              schema:
                $ref: '#/components/schemas/Error'
          description: The `format` used in the consumer creation request does not
            match the embedded format in the Accept header of this request or the
            bridge got a message from the topic which is not JSON encoded.
        "422":
          content:
            application/vnd.kafka.json.v2+json:
              schema:
                $ref: '#/components/schemas/Error'
            application/vnd.kafka.binary.v2+json:
              schema:
                $ref: '#/components/schemas/Error'
            application/vnd.kafka.v2+json:
              examples:
                response:
                  value:
                    error_code: 422
                    message: Response exceeds the maximum number of bytes the consumer
                      can receive
              schema:
                $ref: '#/components/schemas/Error'
          description: Response exceeds the maximum number of bytes the consumer can
            receive
      tags:
      - Consumers
  /topics/{topicname}/partitions:
    get:
      description: Retrieves a list of partitions for the topic.
      operationId: listPartitions
      parameters:
      - description: Name of the topic to send records to or retrieve metadata from.
        explode: false
        in: path
        name: topicname
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/vnd.kafka.v2+json:
              schema:
                items:
                  $ref: '#/components/schemas/PartitionMetadata'
                type: array
          description: List of partitions.
        "404":
          content:
            application/vnd.kafka.v2+json:
              examples:
                response:
                  value:
                    error_code: 404
                    message: The specified topic was not found.
              schema:
                $ref: '#/components/schemas/Error'
          description: The specified topic was not found.
      tags:
      - Topics
  /topics/{topicname}/partitions/{partitionid}:
    get:
      description: Retrieves partition metadata for the topic partition.
      operationId: getPartition
      parameters:
      - description: Name of the topic to send records to or retrieve metadata from.
        explode: false
        in: path
        name: topicname
        required: true
        schema:
          type: string
        style: simple
      - description: ID of the partition to send records to or retrieve metadata from.
        explode: false
        in: path
        name: partitionid
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/vnd.kafka.v2+json:
              schema:
                $ref: '#/components/schemas/PartitionMetadata'
          description: Partition metadata
        "404":
          content:
            application/vnd.kafka.v2+json:
              examples:
                response:
                  value:
                    error_code: 404
                    message: The specified partition was not found.
              schema:
                $ref: '#/components/schemas/Error'
          description: The specified partition was not found.
      tags:
      - Topics
    post:
      description: "Sends one or more records to a given topic partition, optionally\
        \ specifying a key."
      operationId: sendToPartition
      parameters:
      - description: Name of the topic to send records to or retrieve metadata from.
        explode: false
        in: path
        name: topicname
        required: true
        schema:
          type: string
        style: simple
      - description: ID of the partition to send records to or retrieve metadata from.
        explode: false
        in: path
        name: partitionid
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/vnd.kafka.json.v2+json:
            schema:
              $ref: '#/components/schemas/ProducerRecordToPartitionList'
          application/vnd.kafka.binary.v2+json:
            schema:
              $ref: '#/components/schemas/ProducerRecordToPartitionList'
        description: "List of records to send to a given topic partition, including\
          \ a value (required) and a key (optional)."
        required: true
      responses:
        "200":
          content:
            application/vnd.kafka.v2+json:
              examples:
                response:
                  value:
                    offsets:
                    - partition: 2
                      offset: 0
                    - partition: 1
                      offset: 1
                    - partition: 2
                      offset: 2
              schema:
                $ref: '#/components/schemas/OffsetRecordSentList'
          description: Records sent successfully.
        "404":
          content:
            application/vnd.kafka.v2+json:
              examples:
                response:
                  value:
                    error_code: 404
                    message: The specified topic partition was not found.
              schema:
                $ref: '#/components/schemas/Error'
          description: The specified topic partition was not found.
        "422":
          content:
            application/vnd.kafka.v2+json:
              examples:
                response:
                  value:
                    error_code: 422
                    message: The record is not valid.
              schema:
                $ref: '#/components/schemas/Error'
          description: The record is not valid.
      tags:
      - Topics
      - Producer
  /topics/{topicname}/partitions/{partitionid}/offsets:
    get:
      description: Retrieves a summary of the offsets for the topic partition.
      operationId: getOffsets
      parameters:
      - description: Name of the topic containing the partition.
        explode: false
        in: path
        name: topicname
        required: true
        schema:
          type: string
        style: simple
      - description: ID of the partition.
        explode: false
        in: path
        name: partitionid
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/vnd.kafka.v2+json:
              schema:
                $ref: '#/components/schemas/OffsetsSummary'
          description: A summary of the offsets of the topic partition.
        "404":
          content:
            application/vnd.kafka.v2+json:
              examples:
                response:
                  value:
                    error_code: 404
                    message: The specified topic partition was not found.
              schema:
                $ref: '#/components/schemas/Error'
          description: The specified topic partition was not found.
      tags:
      - Topics
  /consumers/{groupid}/instances/{name}:
    delete:
      description: "Deletes a specified consumer instance. The request for this operation\
        \ MUST use the base URL (including the host and port) returned in the response\
        \ from the `POST` request to `/consumers/{groupid}` that was used to create\
        \ this consumer."
      operationId: deleteConsumer
      parameters:
      - description: ID of the consumer group to which the consumer belongs.
        explode: false
        in: path
        name: groupid
        required: true
        schema:
          type: string
        style: simple
      - description: Name of the consumer to delete.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: Consumer removed successfully.
        "404":
          content:
            application/vnd.kafka.v2+json:
              examples:
                response:
                  value:
                    error_code: 404
                    message: The specified consumer instance was not found.
              schema:
                $ref: '#/components/schemas/Error'
          description: The specified consumer instance was not found.
      tags:
      - Consumers
  /consumers/{groupid}/instances/{name}/offsets:
    post:
      description: "Commits a list of consumer offsets. To commit offsets for all\
        \ records fetched by the consumer, leave the request body empty."
      operationId: commit
      parameters:
      - description: ID of the consumer group to which the consumer belongs.
        explode: false
        in: path
        name: groupid
        required: true
        schema:
          type: string
        style: simple
      - description: Name of the consumer.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/vnd.kafka.v2+json:
            schema:
              $ref: '#/components/schemas/OffsetCommitSeekList'
        description: List of consumer offsets to commit to the consumer offsets commit
          log. You can specify one or more topic partitions to commit offsets for.
      responses:
        "204":
          description: Commit made successfully.
        "404":
          content:
            application/vnd.kafka.v2+json:
              examples:
                response:
                  value:
                    error_code: 404
                    message: The specified consumer instance was not found.
              schema:
                $ref: '#/components/schemas/Error'
          description: The specified consumer instance was not found.
      tags:
      - Consumers
  /healthy:
    get:
      description: Check if the bridge is running. This does not necessarily imply
        that it is ready to accept requests.
      operationId: healthy
      responses:
        "200":
          description: The bridge is healthy
  /ready:
    get:
      description: Check if the bridge is ready and can accept requests.
      operationId: ready
      responses:
        "200":
          description: The bridge is ready
  /openapi:
    get:
      description: Retrieves the OpenAPI v2 specification in JSON format.
      operationId: openapi
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
          description: OpenAPI v2 specification in JSON format retrieved successfully.
  /:
    get:
      description: "Retrieves information about the Kafka Bridge instance, in JSON\
        \ format."
      operationId: info
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BridgeInfo'
          description: Information about Kafka Bridge instance.
components:
  schemas:
    KafkaHeader:
      example:
        key: key1
        value: dmFsdWUx
      properties:
        key:
          type: string
        value:
          description: "The header value in binary format, base64-encoded"
          format: byte
          type: string
      required:
      - key
      - value
      title: KafkaHeader
      type: object
    KafkaHeaderList:
      example:
      - key: key1
        value: dmFsdWUx
      - key: key2
        value: dmFsdWUy
      items:
        $ref: '#/components/schemas/KafkaHeader'
      title: KafkaHeaderList
      type: array
    ConsumerRecord:
      example:
        key: key1
        offset: 2
        partition: 0
        topic: topic
        value: value1
        headers:
        - key: key1
          value: dmFsdWUx
        - key: key2
          value: dmFsdWUy
      properties:
        key:
          type: string
        offset:
          format: int64
          type: integer
        partition:
          format: int32
          type: integer
        topic:
          type: string
        value:
          type: string
        headers:
          example:
          - key: key1
            value: dmFsdWUx
          - key: key2
            value: dmFsdWUy
          items:
            $ref: '#/components/schemas/KafkaHeader'
          title: KafkaHeaderList
          type: array
      title: ConsumerRecord
      type: object
    ConsumerRecordList:
      example:
      - topic: topic
        key: key1
        value: value1
        partition: 0
        offset: 2
      - topic: topic
        key: key2
        value: value2
        partition: 1
        offset: 3
      items:
        $ref: '#/components/schemas/ConsumerRecord'
      title: ConsumerRecordList
      type: array
    CreatedConsumer:
      example:
        instance_id: my-consumer
        base_uri: http://localhost:8080/consumers/my-group/instances/my-consumer
      properties:
        instance_id:
          description: Unique ID for the consumer instance in the group.
          type: string
        base_uri:
          description: Base URI used to construct URIs for subsequent requests against
            this consumer instance.
          type: string
      title: CreatedConsumer
      type: object
    OffsetRecordSent:
      example:
        partition: 31
        offset: 86
      properties:
        partition:
          format: int32
          type: integer
        offset:
          format: int64
          type: integer
      title: OffsetRecordSent
      type: object
    OffsetRecordSentList:
      example:
        offsets:
        - partition: 92
          offset: 98
        - partition: 65
          offset: 91
      properties:
        offsets:
          items:
            $ref: '#/components/schemas/OffsetRecordSent'
          type: array
      title: OffsetRecordSentList
      type: object
    OffsetsSummary:
      example:
        beginning_offset: 10
        end_offset: 50
      properties:
        beginning_offset:
          format: int64
          type: integer
        end_offset:
          format: int64
          type: integer
      title: OffsetsSummary
      type: object
    Error:
      example: |-
        {
            "error_code": 404,
            "message": "resource not found"
        }
      properties:
        error_code:
          format: int32
          type: integer
        message:
          type: string
      title: Error
      type: object
    Consumer:
      additionalProperties: false
      example:
        name: consumer1
        format: binary
        auto.offset.reset: earliest
        enable.auto.commit: false
        fetch.min.bytes: 512
        consumer.request.timeout.ms: 30000
        isolation.level: read_committed
      properties:
        name:
          description: "The unique name for the consumer instance. The name is unique\
            \ within the scope of the consumer group. The name is used in URLs. If\
            \ a name is not specified, a randomly generated name is assigned."
          type: string
        format:
          description: "The allowable message format for the consumer, which can be\
            \ `binary` (default) or `json`. The messages are converted into a JSON\
            \ format. "
          type: string
        auto.offset.reset:
          description: "Resets the offset position for the consumer. If set to `latest`\
            \ (default), messages are read from the latest offset. If set to `earliest`,\
            \ messages are read from the first offset."
          type: string
        fetch.min.bytes:
          description: "Sets the minimum amount of data, in bytes, for the consumer\
            \ to receive. The broker waits until the data to send exceeds this amount.\
            \ Default is `1` byte."
          type: integer
        consumer.request.timeout.ms:
          description: "Sets the maximum amount of time, in milliseconds, for the\
            \ consumer to wait for messages for a request. If the timeout period is\
            \ reached without a response, an error is returned. Default is `30000`\
            \ (30 seconds)."
          type: integer
        enable.auto.commit:
          description: "If set to `true` (default), message offsets are committed\
            \ automatically for the consumer. If set to `false`, message offsets must\
            \ be committed manually."
          type: boolean
        isolation.level:
          description: "If set to `read_uncommitted` (default), all transaction records\
            \ are retrieved, indpendent of any transaction outcome. If set to `read_committed`,\
            \ the records from committed transactions are retrieved."
          type: string
      title: Consumer
      type: object
    OffsetCommitSeek:
      additionalProperties: false
      example:
        partition: 43
        offset: 92
        topic: topic
      properties:
        partition:
          format: int32
          type: integer
        offset:
          format: int64
          type: integer
        topic:
          type: string
      required:
      - offset
      - partition
      - topic
      title: OffsetCommitSeek
      type: object
    OffsetCommitSeekList:
      additionalProperties: false
      example:
        offsets:
        - topic: topic
          partition: 0
          offset: 15
        - topic: topic
          partition: 1
          offset: 42
      properties:
        offsets:
          items:
            $ref: '#/components/schemas/OffsetCommitSeek'
          type: array
      title: OffsetCommitSeekList
      type: object
    Partition:
      additionalProperties: false
      properties:
        partition:
          format: int32
          type: integer
        topic:
          type: string
      title: Partition
      type: object
    Partitions:
      additionalProperties: false
      example:
        partitions:
        - topic: topic
          partition: 0
        - topic: topic
          partition: 1
      properties:
        partitions:
          items:
            $ref: '#/components/schemas/Partition'
          type: array
      title: Partitions
      type: object
    ProducerRecord:
      additionalProperties: false
      example:
        key: key1
        partition: 0
        value: value1
        headers:
        - key: key1
          value: dmFsdWUx
        - key: key2
          value: dmFsdWUy
      properties:
        partition:
          format: int32
          type: integer
        value:
          $ref: '#/components/schemas/ProducerRecord_value'
        key:
          $ref: '#/components/schemas/ProducerRecord_key'
        headers:
          example:
          - key: key1
            value: dmFsdWUx
          - key: key2
            value: dmFsdWUy
          items:
            $ref: '#/components/schemas/KafkaHeader'
          title: KafkaHeaderList
          type: array
      required:
      - value
      title: ProducerRecord
      type: object
    ProducerRecordList:
      additionalProperties: false
      example:
        records:
        - key: key1
          value: value1
        - value: value2
          partition: 1
        - value: value3
      properties:
        records:
          items:
            $ref: '#/components/schemas/ProducerRecord'
          type: array
      title: ProducerRecordList
      type: object
    ProducerRecordToPartition:
      additionalProperties: false
      example:
        value:
          v: 128
        key:
          k: key
      properties:
        value:
          $ref: '#/components/schemas/ProducerRecord_key'
        key:
          $ref: '#/components/schemas/ProducerRecord_key'
      required:
      - value
      title: ProducerRecordToPartition
      type: object
    ProducerRecordToPartitionList:
      additionalProperties: false
      example:
        records:
        - key: key1
          value: value1
        - value: value2
      properties:
        records:
          items:
            $ref: '#/components/schemas/ProducerRecordToPartition'
          type: array
      title: ProducerRecordToPartitionList
      type: object
    Topics:
      additionalProperties: false
      example:
        topics:
        - topic1
        - topic2
      properties:
        topics:
          items:
            type: string
          type: array
        topic_pattern:
          description: A regex topic pattern for matching multiple topics
          type: string
      title: Topics
      type: object
    AssignedTopicPartitions:
      additionalProperties:
        items:
          format: int32
          type: integer
        type: array
      example:
        my-topic1:
        - 1
        - 2
        - 3
      title: AssignedTopicPartitions
      type: object
    SubscribedTopicList:
      example:
        topics:
        - my-topic1
        - my-topic2
        partitions:
        - my-topic1:
          - 1
          - 2
          - 3
        - my-topic2:
          - 1
      properties:
        topics:
          $ref: '#/components/schemas/Topics'
        partitions:
          items:
            $ref: '#/components/schemas/AssignedTopicPartitions'
          type: array
      title: SubscribedTopicList
      type: object
    TopicMetadata:
      additionalProperties: false
      example:
        name: topic
        offset: 2
        configs:
          cleanup.policy: compact
        partitions:
        - partition: 1
          leader: 1
          replicas:
          - broker: 1
            leader: true
            in_sync: true
          - broker: 2
            leader: false
            in_sync: true
        - partition: 2
          leader: 2
          replicas:
          - broker: 1
            leader: false
            in_sync: true
          - broker: 2
            leader: true
            in_sync: true
      properties:
        name:
          description: Name of the topic
          type: string
        configs:
          additionalProperties:
            type: string
          description: Per-topic configuration overrides
          type: object
        partitions:
          items:
            $ref: '#/components/schemas/PartitionMetadata'
          type: array
      title: TopicMetadata
      type: object
    PartitionMetadata:
      additionalProperties: false
      example:
        partition: 1
        leader: 1
        replicas:
        - broker: 1
          leader: true
          in_sync: true
        - broker: 2
          leader: false
          in_sync: true
      properties:
        partition:
          format: int32
          type: integer
        leader:
          format: int32
          type: integer
        replicas:
          items:
            $ref: '#/components/schemas/Replica'
          type: array
      title: PartitionMetadata
      type: object
    Replica:
      additionalProperties: false
      example:
        broker: 1
        leader: true
        in_sync: true
      properties:
        broker:
          format: int32
          type: integer
        leader:
          type: boolean
        in_sync:
          type: boolean
      title: Replica
      type: object
    BridgeInfo:
      description: Information about Kafka Bridge instance.
      example:
        bridge_version: 0.16.0
      properties:
        bridge_version:
          type: string
      title: BridgeInfo
      type: object
    ProducerRecord_value:
      nullable: true
      oneOf:
      - nullable: true
        type: object
      - type: string
    ProducerRecord_key:
      oneOf:
      - type: object
      - type: string
