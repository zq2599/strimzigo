/*
Strimzi Kafka Bridge API Reference

The Strimzi Kafka Bridge provides a REST API for integrating HTTP based client applications with a Kafka cluster. You can use the API to create and manage consumers and send and receive records over HTTP rather than the native Kafka protocol. 

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the OffsetRecordSent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OffsetRecordSent{}

// OffsetRecordSent struct for OffsetRecordSent
type OffsetRecordSent struct {
	Partition *int32 `json:"partition,omitempty"`
	Offset *int64 `json:"offset,omitempty"`
}

// NewOffsetRecordSent instantiates a new OffsetRecordSent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOffsetRecordSent() *OffsetRecordSent {
	this := OffsetRecordSent{}
	return &this
}

// NewOffsetRecordSentWithDefaults instantiates a new OffsetRecordSent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOffsetRecordSentWithDefaults() *OffsetRecordSent {
	this := OffsetRecordSent{}
	return &this
}

// GetPartition returns the Partition field value if set, zero value otherwise.
func (o *OffsetRecordSent) GetPartition() int32 {
	if o == nil || isNil(o.Partition) {
		var ret int32
		return ret
	}
	return *o.Partition
}

// GetPartitionOk returns a tuple with the Partition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OffsetRecordSent) GetPartitionOk() (*int32, bool) {
	if o == nil || isNil(o.Partition) {
		return nil, false
	}
	return o.Partition, true
}

// HasPartition returns a boolean if a field has been set.
func (o *OffsetRecordSent) HasPartition() bool {
	if o != nil && !isNil(o.Partition) {
		return true
	}

	return false
}

// SetPartition gets a reference to the given int32 and assigns it to the Partition field.
func (o *OffsetRecordSent) SetPartition(v int32) {
	o.Partition = &v
}

// GetOffset returns the Offset field value if set, zero value otherwise.
func (o *OffsetRecordSent) GetOffset() int64 {
	if o == nil || isNil(o.Offset) {
		var ret int64
		return ret
	}
	return *o.Offset
}

// GetOffsetOk returns a tuple with the Offset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OffsetRecordSent) GetOffsetOk() (*int64, bool) {
	if o == nil || isNil(o.Offset) {
		return nil, false
	}
	return o.Offset, true
}

// HasOffset returns a boolean if a field has been set.
func (o *OffsetRecordSent) HasOffset() bool {
	if o != nil && !isNil(o.Offset) {
		return true
	}

	return false
}

// SetOffset gets a reference to the given int64 and assigns it to the Offset field.
func (o *OffsetRecordSent) SetOffset(v int64) {
	o.Offset = &v
}

func (o OffsetRecordSent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OffsetRecordSent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Partition) {
		toSerialize["partition"] = o.Partition
	}
	if !isNil(o.Offset) {
		toSerialize["offset"] = o.Offset
	}
	return toSerialize, nil
}

type NullableOffsetRecordSent struct {
	value *OffsetRecordSent
	isSet bool
}

func (v NullableOffsetRecordSent) Get() *OffsetRecordSent {
	return v.value
}

func (v *NullableOffsetRecordSent) Set(val *OffsetRecordSent) {
	v.value = val
	v.isSet = true
}

func (v NullableOffsetRecordSent) IsSet() bool {
	return v.isSet
}

func (v *NullableOffsetRecordSent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOffsetRecordSent(val *OffsetRecordSent) *NullableOffsetRecordSent {
	return &NullableOffsetRecordSent{value: val, isSet: true}
}

func (v NullableOffsetRecordSent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOffsetRecordSent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


