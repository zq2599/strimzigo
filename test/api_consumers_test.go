/*
Strimzi Kafka Bridge API Reference

Testing ConsumersApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/zq2599/strimzigo"
)

func Test_openapi_ConsumersApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ConsumersApiService Assign", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupid string
		var name string

		httpRes, err := apiClient.ConsumersApi.Assign(context.Background(), groupid, name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConsumersApiService Commit", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupid string
		var name string

		httpRes, err := apiClient.ConsumersApi.Commit(context.Background(), groupid, name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConsumersApiService CreateConsumer", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupid string

		resp, httpRes, err := apiClient.ConsumersApi.CreateConsumer(context.Background(), groupid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConsumersApiService DeleteConsumer", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupid string
		var name string

		httpRes, err := apiClient.ConsumersApi.DeleteConsumer(context.Background(), groupid, name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConsumersApiService ListSubscriptions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupid string
		var name string

		resp, httpRes, err := apiClient.ConsumersApi.ListSubscriptions(context.Background(), groupid, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConsumersApiService Poll", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupid string
		var name string

		resp, httpRes, err := apiClient.ConsumersApi.Poll(context.Background(), groupid, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConsumersApiService Seek", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupid string
		var name string

		httpRes, err := apiClient.ConsumersApi.Seek(context.Background(), groupid, name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConsumersApiService SeekToBeginning", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupid string
		var name string

		httpRes, err := apiClient.ConsumersApi.SeekToBeginning(context.Background(), groupid, name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConsumersApiService SeekToEnd", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupid string
		var name string

		httpRes, err := apiClient.ConsumersApi.SeekToEnd(context.Background(), groupid, name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConsumersApiService Subscribe", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupid string
		var name string

		httpRes, err := apiClient.ConsumersApi.Subscribe(context.Background(), groupid, name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConsumersApiService Unsubscribe", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupid string
		var name string

		httpRes, err := apiClient.ConsumersApi.Unsubscribe(context.Background(), groupid, name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
