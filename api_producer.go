/*
Strimzi Kafka Bridge API Reference

The Strimzi Kafka Bridge provides a REST API for integrating HTTP based client applications with a Kafka cluster. You can use the API to create and manage consumers and send and receive records over HTTP rather than the native Kafka protocol. 

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


// ProducerApiService ProducerApi service
type ProducerApiService service

type ApiSendRequest struct {
	ctx context.Context
	ApiService *ProducerApiService
	topicname string
	producerRecordList *ProducerRecordList
}

func (r ApiSendRequest) ProducerRecordList(producerRecordList ProducerRecordList) ApiSendRequest {
	r.producerRecordList = &producerRecordList
	return r
}

func (r ApiSendRequest) Execute() (*OffsetRecordSentList, *http.Response, error) {
	return r.ApiService.SendExecute(r)
}

/*
Send Method for Send

Sends one or more records to a given topic, optionally specifying a partition, key, or both.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param topicname Name of the topic to send records to or retrieve metadata from.
 @return ApiSendRequest
*/
func (a *ProducerApiService) Send(ctx context.Context, topicname string) ApiSendRequest {
	return ApiSendRequest{
		ApiService: a,
		ctx: ctx,
		topicname: topicname,
	}
}

// Execute executes the request
//  @return OffsetRecordSentList
func (a *ProducerApiService) SendExecute(r ApiSendRequest) (*OffsetRecordSentList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OffsetRecordSentList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProducerApiService.Send")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/topics/{topicname}"
	localVarPath = strings.Replace(localVarPath, "{"+"topicname"+"}", url.PathEscape(parameterValueToString(r.topicname, "topicname")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.producerRecordList == nil {
		return localVarReturnValue, nil, reportError("producerRecordList is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/vnd.kafka.json.v2+json", "application/vnd.kafka.binary.v2+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.kafka.v2+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.producerRecordList
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSendToPartitionRequest struct {
	ctx context.Context
	ApiService *ProducerApiService
	topicname string
	partitionid int32
	producerRecordToPartitionList *ProducerRecordToPartitionList
}

// List of records to send to a given topic partition, including a value (required) and a key (optional).
func (r ApiSendToPartitionRequest) ProducerRecordToPartitionList(producerRecordToPartitionList ProducerRecordToPartitionList) ApiSendToPartitionRequest {
	r.producerRecordToPartitionList = &producerRecordToPartitionList
	return r
}

func (r ApiSendToPartitionRequest) Execute() (*OffsetRecordSentList, *http.Response, error) {
	return r.ApiService.SendToPartitionExecute(r)
}

/*
SendToPartition Method for SendToPartition

Sends one or more records to a given topic partition, optionally specifying a key.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param topicname Name of the topic to send records to or retrieve metadata from.
 @param partitionid ID of the partition to send records to or retrieve metadata from.
 @return ApiSendToPartitionRequest
*/
func (a *ProducerApiService) SendToPartition(ctx context.Context, topicname string, partitionid int32) ApiSendToPartitionRequest {
	return ApiSendToPartitionRequest{
		ApiService: a,
		ctx: ctx,
		topicname: topicname,
		partitionid: partitionid,
	}
}

// Execute executes the request
//  @return OffsetRecordSentList
func (a *ProducerApiService) SendToPartitionExecute(r ApiSendToPartitionRequest) (*OffsetRecordSentList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OffsetRecordSentList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProducerApiService.SendToPartition")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/topics/{topicname}/partitions/{partitionid}"
	localVarPath = strings.Replace(localVarPath, "{"+"topicname"+"}", url.PathEscape(parameterValueToString(r.topicname, "topicname")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"partitionid"+"}", url.PathEscape(parameterValueToString(r.partitionid, "partitionid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.producerRecordToPartitionList == nil {
		return localVarReturnValue, nil, reportError("producerRecordToPartitionList is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/vnd.kafka.json.v2+json", "application/vnd.kafka.binary.v2+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.kafka.v2+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.producerRecordToPartitionList
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
