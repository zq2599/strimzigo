/*
Strimzi Kafka Bridge API Reference

The Strimzi Kafka Bridge provides a REST API for integrating HTTP based client applications with a Kafka cluster. You can use the API to create and manage consumers and send and receive records over HTTP rather than the native Kafka protocol. 

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Replica type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Replica{}

// Replica struct for Replica
type Replica struct {
	Broker *int32 `json:"broker,omitempty"`
	Leader *bool `json:"leader,omitempty"`
	InSync *bool `json:"in_sync,omitempty"`
}

// NewReplica instantiates a new Replica object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReplica() *Replica {
	this := Replica{}
	return &this
}

// NewReplicaWithDefaults instantiates a new Replica object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReplicaWithDefaults() *Replica {
	this := Replica{}
	return &this
}

// GetBroker returns the Broker field value if set, zero value otherwise.
func (o *Replica) GetBroker() int32 {
	if o == nil || isNil(o.Broker) {
		var ret int32
		return ret
	}
	return *o.Broker
}

// GetBrokerOk returns a tuple with the Broker field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Replica) GetBrokerOk() (*int32, bool) {
	if o == nil || isNil(o.Broker) {
		return nil, false
	}
	return o.Broker, true
}

// HasBroker returns a boolean if a field has been set.
func (o *Replica) HasBroker() bool {
	if o != nil && !isNil(o.Broker) {
		return true
	}

	return false
}

// SetBroker gets a reference to the given int32 and assigns it to the Broker field.
func (o *Replica) SetBroker(v int32) {
	o.Broker = &v
}

// GetLeader returns the Leader field value if set, zero value otherwise.
func (o *Replica) GetLeader() bool {
	if o == nil || isNil(o.Leader) {
		var ret bool
		return ret
	}
	return *o.Leader
}

// GetLeaderOk returns a tuple with the Leader field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Replica) GetLeaderOk() (*bool, bool) {
	if o == nil || isNil(o.Leader) {
		return nil, false
	}
	return o.Leader, true
}

// HasLeader returns a boolean if a field has been set.
func (o *Replica) HasLeader() bool {
	if o != nil && !isNil(o.Leader) {
		return true
	}

	return false
}

// SetLeader gets a reference to the given bool and assigns it to the Leader field.
func (o *Replica) SetLeader(v bool) {
	o.Leader = &v
}

// GetInSync returns the InSync field value if set, zero value otherwise.
func (o *Replica) GetInSync() bool {
	if o == nil || isNil(o.InSync) {
		var ret bool
		return ret
	}
	return *o.InSync
}

// GetInSyncOk returns a tuple with the InSync field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Replica) GetInSyncOk() (*bool, bool) {
	if o == nil || isNil(o.InSync) {
		return nil, false
	}
	return o.InSync, true
}

// HasInSync returns a boolean if a field has been set.
func (o *Replica) HasInSync() bool {
	if o != nil && !isNil(o.InSync) {
		return true
	}

	return false
}

// SetInSync gets a reference to the given bool and assigns it to the InSync field.
func (o *Replica) SetInSync(v bool) {
	o.InSync = &v
}

func (o Replica) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Replica) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Broker) {
		toSerialize["broker"] = o.Broker
	}
	if !isNil(o.Leader) {
		toSerialize["leader"] = o.Leader
	}
	if !isNil(o.InSync) {
		toSerialize["in_sync"] = o.InSync
	}
	return toSerialize, nil
}

type NullableReplica struct {
	value *Replica
	isSet bool
}

func (v NullableReplica) Get() *Replica {
	return v.value
}

func (v *NullableReplica) Set(val *Replica) {
	v.value = val
	v.isSet = true
}

func (v NullableReplica) IsSet() bool {
	return v.isSet
}

func (v *NullableReplica) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReplica(val *Replica) *NullableReplica {
	return &NullableReplica{value: val, isSet: true}
}

func (v NullableReplica) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReplica) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


