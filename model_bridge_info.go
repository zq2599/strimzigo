/*
Strimzi Kafka Bridge API Reference

The Strimzi Kafka Bridge provides a REST API for integrating HTTP based client applications with a Kafka cluster. You can use the API to create and manage consumers and send and receive records over HTTP rather than the native Kafka protocol. 

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the BridgeInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BridgeInfo{}

// BridgeInfo Information about Kafka Bridge instance.
type BridgeInfo struct {
	BridgeVersion *string `json:"bridge_version,omitempty"`
}

// NewBridgeInfo instantiates a new BridgeInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBridgeInfo() *BridgeInfo {
	this := BridgeInfo{}
	return &this
}

// NewBridgeInfoWithDefaults instantiates a new BridgeInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBridgeInfoWithDefaults() *BridgeInfo {
	this := BridgeInfo{}
	return &this
}

// GetBridgeVersion returns the BridgeVersion field value if set, zero value otherwise.
func (o *BridgeInfo) GetBridgeVersion() string {
	if o == nil || isNil(o.BridgeVersion) {
		var ret string
		return ret
	}
	return *o.BridgeVersion
}

// GetBridgeVersionOk returns a tuple with the BridgeVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BridgeInfo) GetBridgeVersionOk() (*string, bool) {
	if o == nil || isNil(o.BridgeVersion) {
		return nil, false
	}
	return o.BridgeVersion, true
}

// HasBridgeVersion returns a boolean if a field has been set.
func (o *BridgeInfo) HasBridgeVersion() bool {
	if o != nil && !isNil(o.BridgeVersion) {
		return true
	}

	return false
}

// SetBridgeVersion gets a reference to the given string and assigns it to the BridgeVersion field.
func (o *BridgeInfo) SetBridgeVersion(v string) {
	o.BridgeVersion = &v
}

func (o BridgeInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BridgeInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.BridgeVersion) {
		toSerialize["bridge_version"] = o.BridgeVersion
	}
	return toSerialize, nil
}

type NullableBridgeInfo struct {
	value *BridgeInfo
	isSet bool
}

func (v NullableBridgeInfo) Get() *BridgeInfo {
	return v.value
}

func (v *NullableBridgeInfo) Set(val *BridgeInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableBridgeInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableBridgeInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBridgeInfo(val *BridgeInfo) *NullableBridgeInfo {
	return &NullableBridgeInfo{value: val, isSet: true}
}

func (v NullableBridgeInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBridgeInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


