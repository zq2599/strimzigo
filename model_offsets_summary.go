/*
Strimzi Kafka Bridge API Reference

The Strimzi Kafka Bridge provides a REST API for integrating HTTP based client applications with a Kafka cluster. You can use the API to create and manage consumers and send and receive records over HTTP rather than the native Kafka protocol. 

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the OffsetsSummary type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OffsetsSummary{}

// OffsetsSummary struct for OffsetsSummary
type OffsetsSummary struct {
	BeginningOffset *int64 `json:"beginning_offset,omitempty"`
	EndOffset *int64 `json:"end_offset,omitempty"`
}

// NewOffsetsSummary instantiates a new OffsetsSummary object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOffsetsSummary() *OffsetsSummary {
	this := OffsetsSummary{}
	return &this
}

// NewOffsetsSummaryWithDefaults instantiates a new OffsetsSummary object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOffsetsSummaryWithDefaults() *OffsetsSummary {
	this := OffsetsSummary{}
	return &this
}

// GetBeginningOffset returns the BeginningOffset field value if set, zero value otherwise.
func (o *OffsetsSummary) GetBeginningOffset() int64 {
	if o == nil || isNil(o.BeginningOffset) {
		var ret int64
		return ret
	}
	return *o.BeginningOffset
}

// GetBeginningOffsetOk returns a tuple with the BeginningOffset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OffsetsSummary) GetBeginningOffsetOk() (*int64, bool) {
	if o == nil || isNil(o.BeginningOffset) {
		return nil, false
	}
	return o.BeginningOffset, true
}

// HasBeginningOffset returns a boolean if a field has been set.
func (o *OffsetsSummary) HasBeginningOffset() bool {
	if o != nil && !isNil(o.BeginningOffset) {
		return true
	}

	return false
}

// SetBeginningOffset gets a reference to the given int64 and assigns it to the BeginningOffset field.
func (o *OffsetsSummary) SetBeginningOffset(v int64) {
	o.BeginningOffset = &v
}

// GetEndOffset returns the EndOffset field value if set, zero value otherwise.
func (o *OffsetsSummary) GetEndOffset() int64 {
	if o == nil || isNil(o.EndOffset) {
		var ret int64
		return ret
	}
	return *o.EndOffset
}

// GetEndOffsetOk returns a tuple with the EndOffset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OffsetsSummary) GetEndOffsetOk() (*int64, bool) {
	if o == nil || isNil(o.EndOffset) {
		return nil, false
	}
	return o.EndOffset, true
}

// HasEndOffset returns a boolean if a field has been set.
func (o *OffsetsSummary) HasEndOffset() bool {
	if o != nil && !isNil(o.EndOffset) {
		return true
	}

	return false
}

// SetEndOffset gets a reference to the given int64 and assigns it to the EndOffset field.
func (o *OffsetsSummary) SetEndOffset(v int64) {
	o.EndOffset = &v
}

func (o OffsetsSummary) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OffsetsSummary) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.BeginningOffset) {
		toSerialize["beginning_offset"] = o.BeginningOffset
	}
	if !isNil(o.EndOffset) {
		toSerialize["end_offset"] = o.EndOffset
	}
	return toSerialize, nil
}

type NullableOffsetsSummary struct {
	value *OffsetsSummary
	isSet bool
}

func (v NullableOffsetsSummary) Get() *OffsetsSummary {
	return v.value
}

func (v *NullableOffsetsSummary) Set(val *OffsetsSummary) {
	v.value = val
	v.isSet = true
}

func (v NullableOffsetsSummary) IsSet() bool {
	return v.isSet
}

func (v *NullableOffsetsSummary) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOffsetsSummary(val *OffsetsSummary) *NullableOffsetsSummary {
	return &NullableOffsetsSummary{value: val, isSet: true}
}

func (v NullableOffsetsSummary) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOffsetsSummary) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


