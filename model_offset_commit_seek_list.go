/*
Strimzi Kafka Bridge API Reference

The Strimzi Kafka Bridge provides a REST API for integrating HTTP based client applications with a Kafka cluster. You can use the API to create and manage consumers and send and receive records over HTTP rather than the native Kafka protocol. 

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the OffsetCommitSeekList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OffsetCommitSeekList{}

// OffsetCommitSeekList struct for OffsetCommitSeekList
type OffsetCommitSeekList struct {
	Offsets []OffsetCommitSeek `json:"offsets,omitempty"`
}

// NewOffsetCommitSeekList instantiates a new OffsetCommitSeekList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOffsetCommitSeekList() *OffsetCommitSeekList {
	this := OffsetCommitSeekList{}
	return &this
}

// NewOffsetCommitSeekListWithDefaults instantiates a new OffsetCommitSeekList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOffsetCommitSeekListWithDefaults() *OffsetCommitSeekList {
	this := OffsetCommitSeekList{}
	return &this
}

// GetOffsets returns the Offsets field value if set, zero value otherwise.
func (o *OffsetCommitSeekList) GetOffsets() []OffsetCommitSeek {
	if o == nil || isNil(o.Offsets) {
		var ret []OffsetCommitSeek
		return ret
	}
	return o.Offsets
}

// GetOffsetsOk returns a tuple with the Offsets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OffsetCommitSeekList) GetOffsetsOk() ([]OffsetCommitSeek, bool) {
	if o == nil || isNil(o.Offsets) {
		return nil, false
	}
	return o.Offsets, true
}

// HasOffsets returns a boolean if a field has been set.
func (o *OffsetCommitSeekList) HasOffsets() bool {
	if o != nil && !isNil(o.Offsets) {
		return true
	}

	return false
}

// SetOffsets gets a reference to the given []OffsetCommitSeek and assigns it to the Offsets field.
func (o *OffsetCommitSeekList) SetOffsets(v []OffsetCommitSeek) {
	o.Offsets = v
}

func (o OffsetCommitSeekList) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OffsetCommitSeekList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Offsets) {
		toSerialize["offsets"] = o.Offsets
	}
	return toSerialize, nil
}

type NullableOffsetCommitSeekList struct {
	value *OffsetCommitSeekList
	isSet bool
}

func (v NullableOffsetCommitSeekList) Get() *OffsetCommitSeekList {
	return v.value
}

func (v *NullableOffsetCommitSeekList) Set(val *OffsetCommitSeekList) {
	v.value = val
	v.isSet = true
}

func (v NullableOffsetCommitSeekList) IsSet() bool {
	return v.isSet
}

func (v *NullableOffsetCommitSeekList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOffsetCommitSeekList(val *OffsetCommitSeekList) *NullableOffsetCommitSeekList {
	return &NullableOffsetCommitSeekList{value: val, isSet: true}
}

func (v NullableOffsetCommitSeekList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOffsetCommitSeekList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


