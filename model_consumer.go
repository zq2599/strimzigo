/*
Strimzi Kafka Bridge API Reference

The Strimzi Kafka Bridge provides a REST API for integrating HTTP based client applications with a Kafka cluster. You can use the API to create and manage consumers and send and receive records over HTTP rather than the native Kafka protocol. 

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Consumer type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Consumer{}

// Consumer struct for Consumer
type Consumer struct {
	// The unique name for the consumer instance. The name is unique within the scope of the consumer group. The name is used in URLs. If a name is not specified, a randomly generated name is assigned.
	Name *string `json:"name,omitempty"`
	// The allowable message format for the consumer, which can be `binary` (default) or `json`. The messages are converted into a JSON format. 
	Format *string `json:"format,omitempty"`
	// Resets the offset position for the consumer. If set to `latest` (default), messages are read from the latest offset. If set to `earliest`, messages are read from the first offset.
	AutoOffsetReset *string `json:"auto.offset.reset,omitempty"`
	// Sets the minimum amount of data, in bytes, for the consumer to receive. The broker waits until the data to send exceeds this amount. Default is `1` byte.
	FetchMinBytes *int32 `json:"fetch.min.bytes,omitempty"`
	// Sets the maximum amount of time, in milliseconds, for the consumer to wait for messages for a request. If the timeout period is reached without a response, an error is returned. Default is `30000` (30 seconds).
	ConsumerRequestTimeoutMs *int32 `json:"consumer.request.timeout.ms,omitempty"`
	// If set to `true` (default), message offsets are committed automatically for the consumer. If set to `false`, message offsets must be committed manually.
	EnableAutoCommit *bool `json:"enable.auto.commit,omitempty"`
	// If set to `read_uncommitted` (default), all transaction records are retrieved, indpendent of any transaction outcome. If set to `read_committed`, the records from committed transactions are retrieved.
	IsolationLevel *string `json:"isolation.level,omitempty"`
}

// NewConsumer instantiates a new Consumer object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConsumer() *Consumer {
	this := Consumer{}
	return &this
}

// NewConsumerWithDefaults instantiates a new Consumer object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConsumerWithDefaults() *Consumer {
	this := Consumer{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Consumer) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Consumer) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Consumer) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Consumer) SetName(v string) {
	o.Name = &v
}

// GetFormat returns the Format field value if set, zero value otherwise.
func (o *Consumer) GetFormat() string {
	if o == nil || isNil(o.Format) {
		var ret string
		return ret
	}
	return *o.Format
}

// GetFormatOk returns a tuple with the Format field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Consumer) GetFormatOk() (*string, bool) {
	if o == nil || isNil(o.Format) {
		return nil, false
	}
	return o.Format, true
}

// HasFormat returns a boolean if a field has been set.
func (o *Consumer) HasFormat() bool {
	if o != nil && !isNil(o.Format) {
		return true
	}

	return false
}

// SetFormat gets a reference to the given string and assigns it to the Format field.
func (o *Consumer) SetFormat(v string) {
	o.Format = &v
}

// GetAutoOffsetReset returns the AutoOffsetReset field value if set, zero value otherwise.
func (o *Consumer) GetAutoOffsetReset() string {
	if o == nil || isNil(o.AutoOffsetReset) {
		var ret string
		return ret
	}
	return *o.AutoOffsetReset
}

// GetAutoOffsetResetOk returns a tuple with the AutoOffsetReset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Consumer) GetAutoOffsetResetOk() (*string, bool) {
	if o == nil || isNil(o.AutoOffsetReset) {
		return nil, false
	}
	return o.AutoOffsetReset, true
}

// HasAutoOffsetReset returns a boolean if a field has been set.
func (o *Consumer) HasAutoOffsetReset() bool {
	if o != nil && !isNil(o.AutoOffsetReset) {
		return true
	}

	return false
}

// SetAutoOffsetReset gets a reference to the given string and assigns it to the AutoOffsetReset field.
func (o *Consumer) SetAutoOffsetReset(v string) {
	o.AutoOffsetReset = &v
}

// GetFetchMinBytes returns the FetchMinBytes field value if set, zero value otherwise.
func (o *Consumer) GetFetchMinBytes() int32 {
	if o == nil || isNil(o.FetchMinBytes) {
		var ret int32
		return ret
	}
	return *o.FetchMinBytes
}

// GetFetchMinBytesOk returns a tuple with the FetchMinBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Consumer) GetFetchMinBytesOk() (*int32, bool) {
	if o == nil || isNil(o.FetchMinBytes) {
		return nil, false
	}
	return o.FetchMinBytes, true
}

// HasFetchMinBytes returns a boolean if a field has been set.
func (o *Consumer) HasFetchMinBytes() bool {
	if o != nil && !isNil(o.FetchMinBytes) {
		return true
	}

	return false
}

// SetFetchMinBytes gets a reference to the given int32 and assigns it to the FetchMinBytes field.
func (o *Consumer) SetFetchMinBytes(v int32) {
	o.FetchMinBytes = &v
}

// GetConsumerRequestTimeoutMs returns the ConsumerRequestTimeoutMs field value if set, zero value otherwise.
func (o *Consumer) GetConsumerRequestTimeoutMs() int32 {
	if o == nil || isNil(o.ConsumerRequestTimeoutMs) {
		var ret int32
		return ret
	}
	return *o.ConsumerRequestTimeoutMs
}

// GetConsumerRequestTimeoutMsOk returns a tuple with the ConsumerRequestTimeoutMs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Consumer) GetConsumerRequestTimeoutMsOk() (*int32, bool) {
	if o == nil || isNil(o.ConsumerRequestTimeoutMs) {
		return nil, false
	}
	return o.ConsumerRequestTimeoutMs, true
}

// HasConsumerRequestTimeoutMs returns a boolean if a field has been set.
func (o *Consumer) HasConsumerRequestTimeoutMs() bool {
	if o != nil && !isNil(o.ConsumerRequestTimeoutMs) {
		return true
	}

	return false
}

// SetConsumerRequestTimeoutMs gets a reference to the given int32 and assigns it to the ConsumerRequestTimeoutMs field.
func (o *Consumer) SetConsumerRequestTimeoutMs(v int32) {
	o.ConsumerRequestTimeoutMs = &v
}

// GetEnableAutoCommit returns the EnableAutoCommit field value if set, zero value otherwise.
func (o *Consumer) GetEnableAutoCommit() bool {
	if o == nil || isNil(o.EnableAutoCommit) {
		var ret bool
		return ret
	}
	return *o.EnableAutoCommit
}

// GetEnableAutoCommitOk returns a tuple with the EnableAutoCommit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Consumer) GetEnableAutoCommitOk() (*bool, bool) {
	if o == nil || isNil(o.EnableAutoCommit) {
		return nil, false
	}
	return o.EnableAutoCommit, true
}

// HasEnableAutoCommit returns a boolean if a field has been set.
func (o *Consumer) HasEnableAutoCommit() bool {
	if o != nil && !isNil(o.EnableAutoCommit) {
		return true
	}

	return false
}

// SetEnableAutoCommit gets a reference to the given bool and assigns it to the EnableAutoCommit field.
func (o *Consumer) SetEnableAutoCommit(v bool) {
	o.EnableAutoCommit = &v
}

// GetIsolationLevel returns the IsolationLevel field value if set, zero value otherwise.
func (o *Consumer) GetIsolationLevel() string {
	if o == nil || isNil(o.IsolationLevel) {
		var ret string
		return ret
	}
	return *o.IsolationLevel
}

// GetIsolationLevelOk returns a tuple with the IsolationLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Consumer) GetIsolationLevelOk() (*string, bool) {
	if o == nil || isNil(o.IsolationLevel) {
		return nil, false
	}
	return o.IsolationLevel, true
}

// HasIsolationLevel returns a boolean if a field has been set.
func (o *Consumer) HasIsolationLevel() bool {
	if o != nil && !isNil(o.IsolationLevel) {
		return true
	}

	return false
}

// SetIsolationLevel gets a reference to the given string and assigns it to the IsolationLevel field.
func (o *Consumer) SetIsolationLevel(v string) {
	o.IsolationLevel = &v
}

func (o Consumer) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Consumer) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !isNil(o.Format) {
		toSerialize["format"] = o.Format
	}
	if !isNil(o.AutoOffsetReset) {
		toSerialize["auto.offset.reset"] = o.AutoOffsetReset
	}
	if !isNil(o.FetchMinBytes) {
		toSerialize["fetch.min.bytes"] = o.FetchMinBytes
	}
	if !isNil(o.ConsumerRequestTimeoutMs) {
		toSerialize["consumer.request.timeout.ms"] = o.ConsumerRequestTimeoutMs
	}
	if !isNil(o.EnableAutoCommit) {
		toSerialize["enable.auto.commit"] = o.EnableAutoCommit
	}
	if !isNil(o.IsolationLevel) {
		toSerialize["isolation.level"] = o.IsolationLevel
	}
	return toSerialize, nil
}

type NullableConsumer struct {
	value *Consumer
	isSet bool
}

func (v NullableConsumer) Get() *Consumer {
	return v.value
}

func (v *NullableConsumer) Set(val *Consumer) {
	v.value = val
	v.isSet = true
}

func (v NullableConsumer) IsSet() bool {
	return v.isSet
}

func (v *NullableConsumer) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConsumer(val *Consumer) *NullableConsumer {
	return &NullableConsumer{value: val, isSet: true}
}

func (v NullableConsumer) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConsumer) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


