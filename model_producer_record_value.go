/*
Strimzi Kafka Bridge API Reference

The Strimzi Kafka Bridge provides a REST API for integrating HTTP based client applications with a Kafka cluster. You can use the API to create and manage consumers and send and receive records over HTTP rather than the native Kafka protocol. 

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// ProducerRecordValue - struct for ProducerRecordValue
type ProducerRecordValue struct {
	MapmapOfStringinterface{} *map[string]interface{}
	String *string
}

// map[string]interface{}AsProducerRecordValue is a convenience function that returns map[string]interface{} wrapped in ProducerRecordValue
func MapmapOfStringinterface{}AsProducerRecordValue(v *map[string]interface{}) ProducerRecordValue {
	return ProducerRecordValue{
		MapmapOfStringinterface{}: v,
	}
}

// stringAsProducerRecordValue is a convenience function that returns string wrapped in ProducerRecordValue
func StringAsProducerRecordValue(v *string) ProducerRecordValue {
	return ProducerRecordValue{
		String: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *ProducerRecordValue) UnmarshalJSON(data []byte) error {
	var err error
	// this object is nullable so check if the payload is null or empty string
	if string(data) == "" || string(data) == "{}" {
		return nil
	}

	match := 0
	// try to unmarshal data into MapmapOfStringinterface{}
	err = newStrictDecoder(data).Decode(&dst.MapmapOfStringinterface{})
	if err == nil {
		jsonMapmapOfStringinterface{}, _ := json.Marshal(dst.MapmapOfStringinterface{})
		if string(jsonMapmapOfStringinterface{}) == "{}" { // empty struct
			dst.MapmapOfStringinterface{} = nil
		} else {
			match++
		}
	} else {
		dst.MapmapOfStringinterface{} = nil
	}

	// try to unmarshal data into String
	err = newStrictDecoder(data).Decode(&dst.String)
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			match++
		}
	} else {
		dst.String = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.MapmapOfStringinterface{} = nil
		dst.String = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ProducerRecordValue)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ProducerRecordValue)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ProducerRecordValue) MarshalJSON() ([]byte, error) {
	if src.MapmapOfStringinterface{} != nil {
		return json.Marshal(&src.MapmapOfStringinterface{})
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ProducerRecordValue) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.MapmapOfStringinterface{} != nil {
		return obj.MapmapOfStringinterface{}
	}

	if obj.String != nil {
		return obj.String
	}

	// all schemas are nil
	return nil
}

type NullableProducerRecordValue struct {
	value *ProducerRecordValue
	isSet bool
}

func (v NullableProducerRecordValue) Get() *ProducerRecordValue {
	return v.value
}

func (v *NullableProducerRecordValue) Set(val *ProducerRecordValue) {
	v.value = val
	v.isSet = true
}

func (v NullableProducerRecordValue) IsSet() bool {
	return v.isSet
}

func (v *NullableProducerRecordValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProducerRecordValue(val *ProducerRecordValue) *NullableProducerRecordValue {
	return &NullableProducerRecordValue{value: val, isSet: true}
}

func (v NullableProducerRecordValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProducerRecordValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


