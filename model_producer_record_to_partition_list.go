/*
Strimzi Kafka Bridge API Reference

The Strimzi Kafka Bridge provides a REST API for integrating HTTP based client applications with a Kafka cluster. You can use the API to create and manage consumers and send and receive records over HTTP rather than the native Kafka protocol. 

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ProducerRecordToPartitionList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProducerRecordToPartitionList{}

// ProducerRecordToPartitionList struct for ProducerRecordToPartitionList
type ProducerRecordToPartitionList struct {
	Records []ProducerRecordToPartition `json:"records,omitempty"`
}

// NewProducerRecordToPartitionList instantiates a new ProducerRecordToPartitionList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProducerRecordToPartitionList() *ProducerRecordToPartitionList {
	this := ProducerRecordToPartitionList{}
	return &this
}

// NewProducerRecordToPartitionListWithDefaults instantiates a new ProducerRecordToPartitionList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProducerRecordToPartitionListWithDefaults() *ProducerRecordToPartitionList {
	this := ProducerRecordToPartitionList{}
	return &this
}

// GetRecords returns the Records field value if set, zero value otherwise.
func (o *ProducerRecordToPartitionList) GetRecords() []ProducerRecordToPartition {
	if o == nil || isNil(o.Records) {
		var ret []ProducerRecordToPartition
		return ret
	}
	return o.Records
}

// GetRecordsOk returns a tuple with the Records field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProducerRecordToPartitionList) GetRecordsOk() ([]ProducerRecordToPartition, bool) {
	if o == nil || isNil(o.Records) {
		return nil, false
	}
	return o.Records, true
}

// HasRecords returns a boolean if a field has been set.
func (o *ProducerRecordToPartitionList) HasRecords() bool {
	if o != nil && !isNil(o.Records) {
		return true
	}

	return false
}

// SetRecords gets a reference to the given []ProducerRecordToPartition and assigns it to the Records field.
func (o *ProducerRecordToPartitionList) SetRecords(v []ProducerRecordToPartition) {
	o.Records = v
}

func (o ProducerRecordToPartitionList) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProducerRecordToPartitionList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Records) {
		toSerialize["records"] = o.Records
	}
	return toSerialize, nil
}

type NullableProducerRecordToPartitionList struct {
	value *ProducerRecordToPartitionList
	isSet bool
}

func (v NullableProducerRecordToPartitionList) Get() *ProducerRecordToPartitionList {
	return v.value
}

func (v *NullableProducerRecordToPartitionList) Set(val *ProducerRecordToPartitionList) {
	v.value = val
	v.isSet = true
}

func (v NullableProducerRecordToPartitionList) IsSet() bool {
	return v.isSet
}

func (v *NullableProducerRecordToPartitionList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProducerRecordToPartitionList(val *ProducerRecordToPartitionList) *NullableProducerRecordToPartitionList {
	return &NullableProducerRecordToPartitionList{value: val, isSet: true}
}

func (v NullableProducerRecordToPartitionList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProducerRecordToPartitionList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


