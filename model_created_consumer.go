/*
Strimzi Kafka Bridge API Reference

The Strimzi Kafka Bridge provides a REST API for integrating HTTP based client applications with a Kafka cluster. You can use the API to create and manage consumers and send and receive records over HTTP rather than the native Kafka protocol. 

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the CreatedConsumer type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreatedConsumer{}

// CreatedConsumer struct for CreatedConsumer
type CreatedConsumer struct {
	// Unique ID for the consumer instance in the group.
	InstanceId *string `json:"instance_id,omitempty"`
	// Base URI used to construct URIs for subsequent requests against this consumer instance.
	BaseUri *string `json:"base_uri,omitempty"`
}

// NewCreatedConsumer instantiates a new CreatedConsumer object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreatedConsumer() *CreatedConsumer {
	this := CreatedConsumer{}
	return &this
}

// NewCreatedConsumerWithDefaults instantiates a new CreatedConsumer object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreatedConsumerWithDefaults() *CreatedConsumer {
	this := CreatedConsumer{}
	return &this
}

// GetInstanceId returns the InstanceId field value if set, zero value otherwise.
func (o *CreatedConsumer) GetInstanceId() string {
	if o == nil || isNil(o.InstanceId) {
		var ret string
		return ret
	}
	return *o.InstanceId
}

// GetInstanceIdOk returns a tuple with the InstanceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreatedConsumer) GetInstanceIdOk() (*string, bool) {
	if o == nil || isNil(o.InstanceId) {
		return nil, false
	}
	return o.InstanceId, true
}

// HasInstanceId returns a boolean if a field has been set.
func (o *CreatedConsumer) HasInstanceId() bool {
	if o != nil && !isNil(o.InstanceId) {
		return true
	}

	return false
}

// SetInstanceId gets a reference to the given string and assigns it to the InstanceId field.
func (o *CreatedConsumer) SetInstanceId(v string) {
	o.InstanceId = &v
}

// GetBaseUri returns the BaseUri field value if set, zero value otherwise.
func (o *CreatedConsumer) GetBaseUri() string {
	if o == nil || isNil(o.BaseUri) {
		var ret string
		return ret
	}
	return *o.BaseUri
}

// GetBaseUriOk returns a tuple with the BaseUri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreatedConsumer) GetBaseUriOk() (*string, bool) {
	if o == nil || isNil(o.BaseUri) {
		return nil, false
	}
	return o.BaseUri, true
}

// HasBaseUri returns a boolean if a field has been set.
func (o *CreatedConsumer) HasBaseUri() bool {
	if o != nil && !isNil(o.BaseUri) {
		return true
	}

	return false
}

// SetBaseUri gets a reference to the given string and assigns it to the BaseUri field.
func (o *CreatedConsumer) SetBaseUri(v string) {
	o.BaseUri = &v
}

func (o CreatedConsumer) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreatedConsumer) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.InstanceId) {
		toSerialize["instance_id"] = o.InstanceId
	}
	if !isNil(o.BaseUri) {
		toSerialize["base_uri"] = o.BaseUri
	}
	return toSerialize, nil
}

type NullableCreatedConsumer struct {
	value *CreatedConsumer
	isSet bool
}

func (v NullableCreatedConsumer) Get() *CreatedConsumer {
	return v.value
}

func (v *NullableCreatedConsumer) Set(val *CreatedConsumer) {
	v.value = val
	v.isSet = true
}

func (v NullableCreatedConsumer) IsSet() bool {
	return v.isSet
}

func (v *NullableCreatedConsumer) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreatedConsumer(val *CreatedConsumer) *NullableCreatedConsumer {
	return &NullableCreatedConsumer{value: val, isSet: true}
}

func (v NullableCreatedConsumer) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreatedConsumer) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


