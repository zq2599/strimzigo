/*
Strimzi Kafka Bridge API Reference

The Strimzi Kafka Bridge provides a REST API for integrating HTTP based client applications with a Kafka cluster. You can use the API to create and manage consumers and send and receive records over HTTP rather than the native Kafka protocol. 

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Topics type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Topics{}

// Topics struct for Topics
type Topics struct {
	Topics []string `json:"topics,omitempty"`
	// A regex topic pattern for matching multiple topics
	TopicPattern *string `json:"topic_pattern,omitempty"`
}

// NewTopics instantiates a new Topics object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTopics() *Topics {
	this := Topics{}
	return &this
}

// NewTopicsWithDefaults instantiates a new Topics object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTopicsWithDefaults() *Topics {
	this := Topics{}
	return &this
}

// GetTopics returns the Topics field value if set, zero value otherwise.
func (o *Topics) GetTopics() []string {
	if o == nil || isNil(o.Topics) {
		var ret []string
		return ret
	}
	return o.Topics
}

// GetTopicsOk returns a tuple with the Topics field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Topics) GetTopicsOk() ([]string, bool) {
	if o == nil || isNil(o.Topics) {
		return nil, false
	}
	return o.Topics, true
}

// HasTopics returns a boolean if a field has been set.
func (o *Topics) HasTopics() bool {
	if o != nil && !isNil(o.Topics) {
		return true
	}

	return false
}

// SetTopics gets a reference to the given []string and assigns it to the Topics field.
func (o *Topics) SetTopics(v []string) {
	o.Topics = v
}

// GetTopicPattern returns the TopicPattern field value if set, zero value otherwise.
func (o *Topics) GetTopicPattern() string {
	if o == nil || isNil(o.TopicPattern) {
		var ret string
		return ret
	}
	return *o.TopicPattern
}

// GetTopicPatternOk returns a tuple with the TopicPattern field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Topics) GetTopicPatternOk() (*string, bool) {
	if o == nil || isNil(o.TopicPattern) {
		return nil, false
	}
	return o.TopicPattern, true
}

// HasTopicPattern returns a boolean if a field has been set.
func (o *Topics) HasTopicPattern() bool {
	if o != nil && !isNil(o.TopicPattern) {
		return true
	}

	return false
}

// SetTopicPattern gets a reference to the given string and assigns it to the TopicPattern field.
func (o *Topics) SetTopicPattern(v string) {
	o.TopicPattern = &v
}

func (o Topics) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Topics) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Topics) {
		toSerialize["topics"] = o.Topics
	}
	if !isNil(o.TopicPattern) {
		toSerialize["topic_pattern"] = o.TopicPattern
	}
	return toSerialize, nil
}

type NullableTopics struct {
	value *Topics
	isSet bool
}

func (v NullableTopics) Get() *Topics {
	return v.value
}

func (v *NullableTopics) Set(val *Topics) {
	v.value = val
	v.isSet = true
}

func (v NullableTopics) IsSet() bool {
	return v.isSet
}

func (v *NullableTopics) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTopics(val *Topics) *NullableTopics {
	return &NullableTopics{value: val, isSet: true}
}

func (v NullableTopics) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTopics) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


