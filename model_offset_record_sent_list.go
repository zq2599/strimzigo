/*
Strimzi Kafka Bridge API Reference

The Strimzi Kafka Bridge provides a REST API for integrating HTTP based client applications with a Kafka cluster. You can use the API to create and manage consumers and send and receive records over HTTP rather than the native Kafka protocol. 

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the OffsetRecordSentList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OffsetRecordSentList{}

// OffsetRecordSentList struct for OffsetRecordSentList
type OffsetRecordSentList struct {
	Offsets []OffsetRecordSent `json:"offsets,omitempty"`
}

// NewOffsetRecordSentList instantiates a new OffsetRecordSentList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOffsetRecordSentList() *OffsetRecordSentList {
	this := OffsetRecordSentList{}
	return &this
}

// NewOffsetRecordSentListWithDefaults instantiates a new OffsetRecordSentList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOffsetRecordSentListWithDefaults() *OffsetRecordSentList {
	this := OffsetRecordSentList{}
	return &this
}

// GetOffsets returns the Offsets field value if set, zero value otherwise.
func (o *OffsetRecordSentList) GetOffsets() []OffsetRecordSent {
	if o == nil || isNil(o.Offsets) {
		var ret []OffsetRecordSent
		return ret
	}
	return o.Offsets
}

// GetOffsetsOk returns a tuple with the Offsets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OffsetRecordSentList) GetOffsetsOk() ([]OffsetRecordSent, bool) {
	if o == nil || isNil(o.Offsets) {
		return nil, false
	}
	return o.Offsets, true
}

// HasOffsets returns a boolean if a field has been set.
func (o *OffsetRecordSentList) HasOffsets() bool {
	if o != nil && !isNil(o.Offsets) {
		return true
	}

	return false
}

// SetOffsets gets a reference to the given []OffsetRecordSent and assigns it to the Offsets field.
func (o *OffsetRecordSentList) SetOffsets(v []OffsetRecordSent) {
	o.Offsets = v
}

func (o OffsetRecordSentList) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OffsetRecordSentList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Offsets) {
		toSerialize["offsets"] = o.Offsets
	}
	return toSerialize, nil
}

type NullableOffsetRecordSentList struct {
	value *OffsetRecordSentList
	isSet bool
}

func (v NullableOffsetRecordSentList) Get() *OffsetRecordSentList {
	return v.value
}

func (v *NullableOffsetRecordSentList) Set(val *OffsetRecordSentList) {
	v.value = val
	v.isSet = true
}

func (v NullableOffsetRecordSentList) IsSet() bool {
	return v.isSet
}

func (v *NullableOffsetRecordSentList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOffsetRecordSentList(val *OffsetRecordSentList) *NullableOffsetRecordSentList {
	return &NullableOffsetRecordSentList{value: val, isSet: true}
}

func (v NullableOffsetRecordSentList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOffsetRecordSentList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


