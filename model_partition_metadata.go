/*
Strimzi Kafka Bridge API Reference

The Strimzi Kafka Bridge provides a REST API for integrating HTTP based client applications with a Kafka cluster. You can use the API to create and manage consumers and send and receive records over HTTP rather than the native Kafka protocol. 

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the PartitionMetadata type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PartitionMetadata{}

// PartitionMetadata struct for PartitionMetadata
type PartitionMetadata struct {
	Partition *int32 `json:"partition,omitempty"`
	Leader *int32 `json:"leader,omitempty"`
	Replicas []Replica `json:"replicas,omitempty"`
}

// NewPartitionMetadata instantiates a new PartitionMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPartitionMetadata() *PartitionMetadata {
	this := PartitionMetadata{}
	return &this
}

// NewPartitionMetadataWithDefaults instantiates a new PartitionMetadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPartitionMetadataWithDefaults() *PartitionMetadata {
	this := PartitionMetadata{}
	return &this
}

// GetPartition returns the Partition field value if set, zero value otherwise.
func (o *PartitionMetadata) GetPartition() int32 {
	if o == nil || isNil(o.Partition) {
		var ret int32
		return ret
	}
	return *o.Partition
}

// GetPartitionOk returns a tuple with the Partition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PartitionMetadata) GetPartitionOk() (*int32, bool) {
	if o == nil || isNil(o.Partition) {
		return nil, false
	}
	return o.Partition, true
}

// HasPartition returns a boolean if a field has been set.
func (o *PartitionMetadata) HasPartition() bool {
	if o != nil && !isNil(o.Partition) {
		return true
	}

	return false
}

// SetPartition gets a reference to the given int32 and assigns it to the Partition field.
func (o *PartitionMetadata) SetPartition(v int32) {
	o.Partition = &v
}

// GetLeader returns the Leader field value if set, zero value otherwise.
func (o *PartitionMetadata) GetLeader() int32 {
	if o == nil || isNil(o.Leader) {
		var ret int32
		return ret
	}
	return *o.Leader
}

// GetLeaderOk returns a tuple with the Leader field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PartitionMetadata) GetLeaderOk() (*int32, bool) {
	if o == nil || isNil(o.Leader) {
		return nil, false
	}
	return o.Leader, true
}

// HasLeader returns a boolean if a field has been set.
func (o *PartitionMetadata) HasLeader() bool {
	if o != nil && !isNil(o.Leader) {
		return true
	}

	return false
}

// SetLeader gets a reference to the given int32 and assigns it to the Leader field.
func (o *PartitionMetadata) SetLeader(v int32) {
	o.Leader = &v
}

// GetReplicas returns the Replicas field value if set, zero value otherwise.
func (o *PartitionMetadata) GetReplicas() []Replica {
	if o == nil || isNil(o.Replicas) {
		var ret []Replica
		return ret
	}
	return o.Replicas
}

// GetReplicasOk returns a tuple with the Replicas field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PartitionMetadata) GetReplicasOk() ([]Replica, bool) {
	if o == nil || isNil(o.Replicas) {
		return nil, false
	}
	return o.Replicas, true
}

// HasReplicas returns a boolean if a field has been set.
func (o *PartitionMetadata) HasReplicas() bool {
	if o != nil && !isNil(o.Replicas) {
		return true
	}

	return false
}

// SetReplicas gets a reference to the given []Replica and assigns it to the Replicas field.
func (o *PartitionMetadata) SetReplicas(v []Replica) {
	o.Replicas = v
}

func (o PartitionMetadata) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PartitionMetadata) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Partition) {
		toSerialize["partition"] = o.Partition
	}
	if !isNil(o.Leader) {
		toSerialize["leader"] = o.Leader
	}
	if !isNil(o.Replicas) {
		toSerialize["replicas"] = o.Replicas
	}
	return toSerialize, nil
}

type NullablePartitionMetadata struct {
	value *PartitionMetadata
	isSet bool
}

func (v NullablePartitionMetadata) Get() *PartitionMetadata {
	return v.value
}

func (v *NullablePartitionMetadata) Set(val *PartitionMetadata) {
	v.value = val
	v.isSet = true
}

func (v NullablePartitionMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullablePartitionMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePartitionMetadata(val *PartitionMetadata) *NullablePartitionMetadata {
	return &NullablePartitionMetadata{value: val, isSet: true}
}

func (v NullablePartitionMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePartitionMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


