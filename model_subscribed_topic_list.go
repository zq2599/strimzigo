/*
Strimzi Kafka Bridge API Reference

The Strimzi Kafka Bridge provides a REST API for integrating HTTP based client applications with a Kafka cluster. You can use the API to create and manage consumers and send and receive records over HTTP rather than the native Kafka protocol. 

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SubscribedTopicList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SubscribedTopicList{}

// SubscribedTopicList struct for SubscribedTopicList
type SubscribedTopicList struct {
	Topics *Topics `json:"topics,omitempty"`
	Partitions []map[string][]int32 `json:"partitions,omitempty"`
}

// NewSubscribedTopicList instantiates a new SubscribedTopicList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubscribedTopicList() *SubscribedTopicList {
	this := SubscribedTopicList{}
	return &this
}

// NewSubscribedTopicListWithDefaults instantiates a new SubscribedTopicList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubscribedTopicListWithDefaults() *SubscribedTopicList {
	this := SubscribedTopicList{}
	return &this
}

// GetTopics returns the Topics field value if set, zero value otherwise.
func (o *SubscribedTopicList) GetTopics() Topics {
	if o == nil || isNil(o.Topics) {
		var ret Topics
		return ret
	}
	return *o.Topics
}

// GetTopicsOk returns a tuple with the Topics field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscribedTopicList) GetTopicsOk() (*Topics, bool) {
	if o == nil || isNil(o.Topics) {
		return nil, false
	}
	return o.Topics, true
}

// HasTopics returns a boolean if a field has been set.
func (o *SubscribedTopicList) HasTopics() bool {
	if o != nil && !isNil(o.Topics) {
		return true
	}

	return false
}

// SetTopics gets a reference to the given Topics and assigns it to the Topics field.
func (o *SubscribedTopicList) SetTopics(v Topics) {
	o.Topics = &v
}

// GetPartitions returns the Partitions field value if set, zero value otherwise.
func (o *SubscribedTopicList) GetPartitions() []map[string][]int32 {
	if o == nil || isNil(o.Partitions) {
		var ret []map[string][]int32
		return ret
	}
	return o.Partitions
}

// GetPartitionsOk returns a tuple with the Partitions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscribedTopicList) GetPartitionsOk() ([]map[string][]int32, bool) {
	if o == nil || isNil(o.Partitions) {
		return nil, false
	}
	return o.Partitions, true
}

// HasPartitions returns a boolean if a field has been set.
func (o *SubscribedTopicList) HasPartitions() bool {
	if o != nil && !isNil(o.Partitions) {
		return true
	}

	return false
}

// SetPartitions gets a reference to the given []map[string][]int32 and assigns it to the Partitions field.
func (o *SubscribedTopicList) SetPartitions(v []map[string][]int32) {
	o.Partitions = v
}

func (o SubscribedTopicList) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SubscribedTopicList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Topics) {
		toSerialize["topics"] = o.Topics
	}
	if !isNil(o.Partitions) {
		toSerialize["partitions"] = o.Partitions
	}
	return toSerialize, nil
}

type NullableSubscribedTopicList struct {
	value *SubscribedTopicList
	isSet bool
}

func (v NullableSubscribedTopicList) Get() *SubscribedTopicList {
	return v.value
}

func (v *NullableSubscribedTopicList) Set(val *SubscribedTopicList) {
	v.value = val
	v.isSet = true
}

func (v NullableSubscribedTopicList) IsSet() bool {
	return v.isSet
}

func (v *NullableSubscribedTopicList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubscribedTopicList(val *SubscribedTopicList) *NullableSubscribedTopicList {
	return &NullableSubscribedTopicList{value: val, isSet: true}
}

func (v NullableSubscribedTopicList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubscribedTopicList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


