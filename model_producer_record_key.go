/*
Strimzi Kafka Bridge API Reference

The Strimzi Kafka Bridge provides a REST API for integrating HTTP based client applications with a Kafka cluster. You can use the API to create and manage consumers and send and receive records over HTTP rather than the native Kafka protocol. 

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// ProducerRecordKey - struct for ProducerRecordKey
type ProducerRecordKey struct {
	MapmapOfStringinterface{} *map[string]interface{}
	String *string
}

// map[string]interface{}AsProducerRecordKey is a convenience function that returns map[string]interface{} wrapped in ProducerRecordKey
func MapmapOfStringinterface{}AsProducerRecordKey(v *map[string]interface{}) ProducerRecordKey {
	return ProducerRecordKey{
		MapmapOfStringinterface{}: v,
	}
}

// stringAsProducerRecordKey is a convenience function that returns string wrapped in ProducerRecordKey
func StringAsProducerRecordKey(v *string) ProducerRecordKey {
	return ProducerRecordKey{
		String: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *ProducerRecordKey) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into MapmapOfStringinterface{}
	err = newStrictDecoder(data).Decode(&dst.MapmapOfStringinterface{})
	if err == nil {
		jsonMapmapOfStringinterface{}, _ := json.Marshal(dst.MapmapOfStringinterface{})
		if string(jsonMapmapOfStringinterface{}) == "{}" { // empty struct
			dst.MapmapOfStringinterface{} = nil
		} else {
			match++
		}
	} else {
		dst.MapmapOfStringinterface{} = nil
	}

	// try to unmarshal data into String
	err = newStrictDecoder(data).Decode(&dst.String)
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			match++
		}
	} else {
		dst.String = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.MapmapOfStringinterface{} = nil
		dst.String = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ProducerRecordKey)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ProducerRecordKey)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ProducerRecordKey) MarshalJSON() ([]byte, error) {
	if src.MapmapOfStringinterface{} != nil {
		return json.Marshal(&src.MapmapOfStringinterface{})
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ProducerRecordKey) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.MapmapOfStringinterface{} != nil {
		return obj.MapmapOfStringinterface{}
	}

	if obj.String != nil {
		return obj.String
	}

	// all schemas are nil
	return nil
}

type NullableProducerRecordKey struct {
	value *ProducerRecordKey
	isSet bool
}

func (v NullableProducerRecordKey) Get() *ProducerRecordKey {
	return v.value
}

func (v *NullableProducerRecordKey) Set(val *ProducerRecordKey) {
	v.value = val
	v.isSet = true
}

func (v NullableProducerRecordKey) IsSet() bool {
	return v.isSet
}

func (v *NullableProducerRecordKey) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProducerRecordKey(val *ProducerRecordKey) *NullableProducerRecordKey {
	return &NullableProducerRecordKey{value: val, isSet: true}
}

func (v NullableProducerRecordKey) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProducerRecordKey) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


