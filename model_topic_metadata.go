/*
Strimzi Kafka Bridge API Reference

The Strimzi Kafka Bridge provides a REST API for integrating HTTP based client applications with a Kafka cluster. You can use the API to create and manage consumers and send and receive records over HTTP rather than the native Kafka protocol. 

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the TopicMetadata type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TopicMetadata{}

// TopicMetadata struct for TopicMetadata
type TopicMetadata struct {
	// Name of the topic
	Name *string `json:"name,omitempty"`
	// Per-topic configuration overrides
	Configs *map[string]string `json:"configs,omitempty"`
	Partitions []PartitionMetadata `json:"partitions,omitempty"`
}

// NewTopicMetadata instantiates a new TopicMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTopicMetadata() *TopicMetadata {
	this := TopicMetadata{}
	return &this
}

// NewTopicMetadataWithDefaults instantiates a new TopicMetadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTopicMetadataWithDefaults() *TopicMetadata {
	this := TopicMetadata{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *TopicMetadata) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TopicMetadata) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *TopicMetadata) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *TopicMetadata) SetName(v string) {
	o.Name = &v
}

// GetConfigs returns the Configs field value if set, zero value otherwise.
func (o *TopicMetadata) GetConfigs() map[string]string {
	if o == nil || isNil(o.Configs) {
		var ret map[string]string
		return ret
	}
	return *o.Configs
}

// GetConfigsOk returns a tuple with the Configs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TopicMetadata) GetConfigsOk() (*map[string]string, bool) {
	if o == nil || isNil(o.Configs) {
		return nil, false
	}
	return o.Configs, true
}

// HasConfigs returns a boolean if a field has been set.
func (o *TopicMetadata) HasConfigs() bool {
	if o != nil && !isNil(o.Configs) {
		return true
	}

	return false
}

// SetConfigs gets a reference to the given map[string]string and assigns it to the Configs field.
func (o *TopicMetadata) SetConfigs(v map[string]string) {
	o.Configs = &v
}

// GetPartitions returns the Partitions field value if set, zero value otherwise.
func (o *TopicMetadata) GetPartitions() []PartitionMetadata {
	if o == nil || isNil(o.Partitions) {
		var ret []PartitionMetadata
		return ret
	}
	return o.Partitions
}

// GetPartitionsOk returns a tuple with the Partitions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TopicMetadata) GetPartitionsOk() ([]PartitionMetadata, bool) {
	if o == nil || isNil(o.Partitions) {
		return nil, false
	}
	return o.Partitions, true
}

// HasPartitions returns a boolean if a field has been set.
func (o *TopicMetadata) HasPartitions() bool {
	if o != nil && !isNil(o.Partitions) {
		return true
	}

	return false
}

// SetPartitions gets a reference to the given []PartitionMetadata and assigns it to the Partitions field.
func (o *TopicMetadata) SetPartitions(v []PartitionMetadata) {
	o.Partitions = v
}

func (o TopicMetadata) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TopicMetadata) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !isNil(o.Configs) {
		toSerialize["configs"] = o.Configs
	}
	if !isNil(o.Partitions) {
		toSerialize["partitions"] = o.Partitions
	}
	return toSerialize, nil
}

type NullableTopicMetadata struct {
	value *TopicMetadata
	isSet bool
}

func (v NullableTopicMetadata) Get() *TopicMetadata {
	return v.value
}

func (v *NullableTopicMetadata) Set(val *TopicMetadata) {
	v.value = val
	v.isSet = true
}

func (v NullableTopicMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullableTopicMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTopicMetadata(val *TopicMetadata) *NullableTopicMetadata {
	return &NullableTopicMetadata{value: val, isSet: true}
}

func (v NullableTopicMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTopicMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


