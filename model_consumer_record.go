/*
Strimzi Kafka Bridge API Reference

The Strimzi Kafka Bridge provides a REST API for integrating HTTP based client applications with a Kafka cluster. You can use the API to create and manage consumers and send and receive records over HTTP rather than the native Kafka protocol. 

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ConsumerRecord type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConsumerRecord{}

// ConsumerRecord struct for ConsumerRecord
type ConsumerRecord struct {
	Key *string `json:"key,omitempty"`
	Offset *int64 `json:"offset,omitempty"`
	Partition *int32 `json:"partition,omitempty"`
	Topic *string `json:"topic,omitempty"`
	Value *string `json:"value,omitempty"`
	Headers []KafkaHeader `json:"headers,omitempty"`
}

// NewConsumerRecord instantiates a new ConsumerRecord object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConsumerRecord() *ConsumerRecord {
	this := ConsumerRecord{}
	return &this
}

// NewConsumerRecordWithDefaults instantiates a new ConsumerRecord object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConsumerRecordWithDefaults() *ConsumerRecord {
	this := ConsumerRecord{}
	return &this
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *ConsumerRecord) GetKey() string {
	if o == nil || isNil(o.Key) {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsumerRecord) GetKeyOk() (*string, bool) {
	if o == nil || isNil(o.Key) {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *ConsumerRecord) HasKey() bool {
	if o != nil && !isNil(o.Key) {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *ConsumerRecord) SetKey(v string) {
	o.Key = &v
}

// GetOffset returns the Offset field value if set, zero value otherwise.
func (o *ConsumerRecord) GetOffset() int64 {
	if o == nil || isNil(o.Offset) {
		var ret int64
		return ret
	}
	return *o.Offset
}

// GetOffsetOk returns a tuple with the Offset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsumerRecord) GetOffsetOk() (*int64, bool) {
	if o == nil || isNil(o.Offset) {
		return nil, false
	}
	return o.Offset, true
}

// HasOffset returns a boolean if a field has been set.
func (o *ConsumerRecord) HasOffset() bool {
	if o != nil && !isNil(o.Offset) {
		return true
	}

	return false
}

// SetOffset gets a reference to the given int64 and assigns it to the Offset field.
func (o *ConsumerRecord) SetOffset(v int64) {
	o.Offset = &v
}

// GetPartition returns the Partition field value if set, zero value otherwise.
func (o *ConsumerRecord) GetPartition() int32 {
	if o == nil || isNil(o.Partition) {
		var ret int32
		return ret
	}
	return *o.Partition
}

// GetPartitionOk returns a tuple with the Partition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsumerRecord) GetPartitionOk() (*int32, bool) {
	if o == nil || isNil(o.Partition) {
		return nil, false
	}
	return o.Partition, true
}

// HasPartition returns a boolean if a field has been set.
func (o *ConsumerRecord) HasPartition() bool {
	if o != nil && !isNil(o.Partition) {
		return true
	}

	return false
}

// SetPartition gets a reference to the given int32 and assigns it to the Partition field.
func (o *ConsumerRecord) SetPartition(v int32) {
	o.Partition = &v
}

// GetTopic returns the Topic field value if set, zero value otherwise.
func (o *ConsumerRecord) GetTopic() string {
	if o == nil || isNil(o.Topic) {
		var ret string
		return ret
	}
	return *o.Topic
}

// GetTopicOk returns a tuple with the Topic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsumerRecord) GetTopicOk() (*string, bool) {
	if o == nil || isNil(o.Topic) {
		return nil, false
	}
	return o.Topic, true
}

// HasTopic returns a boolean if a field has been set.
func (o *ConsumerRecord) HasTopic() bool {
	if o != nil && !isNil(o.Topic) {
		return true
	}

	return false
}

// SetTopic gets a reference to the given string and assigns it to the Topic field.
func (o *ConsumerRecord) SetTopic(v string) {
	o.Topic = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *ConsumerRecord) GetValue() string {
	if o == nil || isNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsumerRecord) GetValueOk() (*string, bool) {
	if o == nil || isNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *ConsumerRecord) HasValue() bool {
	if o != nil && !isNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *ConsumerRecord) SetValue(v string) {
	o.Value = &v
}

// GetHeaders returns the Headers field value if set, zero value otherwise.
func (o *ConsumerRecord) GetHeaders() []KafkaHeader {
	if o == nil || isNil(o.Headers) {
		var ret []KafkaHeader
		return ret
	}
	return o.Headers
}

// GetHeadersOk returns a tuple with the Headers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsumerRecord) GetHeadersOk() ([]KafkaHeader, bool) {
	if o == nil || isNil(o.Headers) {
		return nil, false
	}
	return o.Headers, true
}

// HasHeaders returns a boolean if a field has been set.
func (o *ConsumerRecord) HasHeaders() bool {
	if o != nil && !isNil(o.Headers) {
		return true
	}

	return false
}

// SetHeaders gets a reference to the given []KafkaHeader and assigns it to the Headers field.
func (o *ConsumerRecord) SetHeaders(v []KafkaHeader) {
	o.Headers = v
}

func (o ConsumerRecord) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConsumerRecord) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Key) {
		toSerialize["key"] = o.Key
	}
	if !isNil(o.Offset) {
		toSerialize["offset"] = o.Offset
	}
	if !isNil(o.Partition) {
		toSerialize["partition"] = o.Partition
	}
	if !isNil(o.Topic) {
		toSerialize["topic"] = o.Topic
	}
	if !isNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	if !isNil(o.Headers) {
		toSerialize["headers"] = o.Headers
	}
	return toSerialize, nil
}

type NullableConsumerRecord struct {
	value *ConsumerRecord
	isSet bool
}

func (v NullableConsumerRecord) Get() *ConsumerRecord {
	return v.value
}

func (v *NullableConsumerRecord) Set(val *ConsumerRecord) {
	v.value = val
	v.isSet = true
}

func (v NullableConsumerRecord) IsSet() bool {
	return v.isSet
}

func (v *NullableConsumerRecord) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConsumerRecord(val *ConsumerRecord) *NullableConsumerRecord {
	return &NullableConsumerRecord{value: val, isSet: true}
}

func (v NullableConsumerRecord) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConsumerRecord) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


