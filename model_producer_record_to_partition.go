/*
Strimzi Kafka Bridge API Reference

The Strimzi Kafka Bridge provides a REST API for integrating HTTP based client applications with a Kafka cluster. You can use the API to create and manage consumers and send and receive records over HTTP rather than the native Kafka protocol. 

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ProducerRecordToPartition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProducerRecordToPartition{}

// ProducerRecordToPartition struct for ProducerRecordToPartition
type ProducerRecordToPartition struct {
	Value ProducerRecordKey `json:"value"`
	Key *ProducerRecordKey `json:"key,omitempty"`
}

// NewProducerRecordToPartition instantiates a new ProducerRecordToPartition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProducerRecordToPartition(value ProducerRecordKey) *ProducerRecordToPartition {
	this := ProducerRecordToPartition{}
	this.Value = value
	return &this
}

// NewProducerRecordToPartitionWithDefaults instantiates a new ProducerRecordToPartition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProducerRecordToPartitionWithDefaults() *ProducerRecordToPartition {
	this := ProducerRecordToPartition{}
	return &this
}

// GetValue returns the Value field value
func (o *ProducerRecordToPartition) GetValue() ProducerRecordKey {
	if o == nil {
		var ret ProducerRecordKey
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *ProducerRecordToPartition) GetValueOk() (*ProducerRecordKey, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *ProducerRecordToPartition) SetValue(v ProducerRecordKey) {
	o.Value = v
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *ProducerRecordToPartition) GetKey() ProducerRecordKey {
	if o == nil || isNil(o.Key) {
		var ret ProducerRecordKey
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProducerRecordToPartition) GetKeyOk() (*ProducerRecordKey, bool) {
	if o == nil || isNil(o.Key) {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *ProducerRecordToPartition) HasKey() bool {
	if o != nil && !isNil(o.Key) {
		return true
	}

	return false
}

// SetKey gets a reference to the given ProducerRecordKey and assigns it to the Key field.
func (o *ProducerRecordToPartition) SetKey(v ProducerRecordKey) {
	o.Key = &v
}

func (o ProducerRecordToPartition) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProducerRecordToPartition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["value"] = o.Value
	if !isNil(o.Key) {
		toSerialize["key"] = o.Key
	}
	return toSerialize, nil
}

type NullableProducerRecordToPartition struct {
	value *ProducerRecordToPartition
	isSet bool
}

func (v NullableProducerRecordToPartition) Get() *ProducerRecordToPartition {
	return v.value
}

func (v *NullableProducerRecordToPartition) Set(val *ProducerRecordToPartition) {
	v.value = val
	v.isSet = true
}

func (v NullableProducerRecordToPartition) IsSet() bool {
	return v.isSet
}

func (v *NullableProducerRecordToPartition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProducerRecordToPartition(val *ProducerRecordToPartition) *NullableProducerRecordToPartition {
	return &NullableProducerRecordToPartition{value: val, isSet: true}
}

func (v NullableProducerRecordToPartition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProducerRecordToPartition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


