/*
Strimzi Kafka Bridge API Reference

The Strimzi Kafka Bridge provides a REST API for integrating HTTP based client applications with a Kafka cluster. You can use the API to create and manage consumers and send and receive records over HTTP rather than the native Kafka protocol. 

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


// SeekApiService SeekApi service
type SeekApiService service

type ApiSeekRequest struct {
	ctx context.Context
	ApiService *SeekApiService
	groupid string
	name string
	offsetCommitSeekList *OffsetCommitSeekList
}

// List of partition offsets from which the subscribed consumer will next fetch records.
func (r ApiSeekRequest) OffsetCommitSeekList(offsetCommitSeekList OffsetCommitSeekList) ApiSeekRequest {
	r.offsetCommitSeekList = &offsetCommitSeekList
	return r
}

func (r ApiSeekRequest) Execute() (*http.Response, error) {
	return r.ApiService.SeekExecute(r)
}

/*
Seek Method for Seek

Configures a subscribed consumer to fetch offsets from a particular offset the next time it fetches a set of records from a given topic partition. This overrides the default fetch behavior for consumers. You can specify one or more topic partitions.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupid ID of the consumer group to which the consumer belongs.
 @param name Name of the subscribed consumer.
 @return ApiSeekRequest
*/
func (a *SeekApiService) Seek(ctx context.Context, groupid string, name string) ApiSeekRequest {
	return ApiSeekRequest{
		ApiService: a,
		ctx: ctx,
		groupid: groupid,
		name: name,
	}
}

// Execute executes the request
func (a *SeekApiService) SeekExecute(r ApiSeekRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SeekApiService.Seek")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/consumers/{groupid}/instances/{name}/positions"
	localVarPath = strings.Replace(localVarPath, "{"+"groupid"+"}", url.PathEscape(parameterValueToString(r.groupid, "groupid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.offsetCommitSeekList == nil {
		return nil, reportError("offsetCommitSeekList is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/vnd.kafka.v2+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.kafka.v2+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.offsetCommitSeekList
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSeekToBeginningRequest struct {
	ctx context.Context
	ApiService *SeekApiService
	groupid string
	name string
	partitions *Partitions
}

// List of topic partitions to which the consumer is subscribed. The consumer will seek the first offset in the specified partitions.
func (r ApiSeekToBeginningRequest) Partitions(partitions Partitions) ApiSeekToBeginningRequest {
	r.partitions = &partitions
	return r
}

func (r ApiSeekToBeginningRequest) Execute() (*http.Response, error) {
	return r.ApiService.SeekToBeginningExecute(r)
}

/*
SeekToBeginning Method for SeekToBeginning

Configures a subscribed consumer to seek (and subsequently read from) the first offset in one or more given topic partitions.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupid ID of the consumer group to which the subscribed consumer belongs.
 @param name Name of the subscribed consumer.
 @return ApiSeekToBeginningRequest
*/
func (a *SeekApiService) SeekToBeginning(ctx context.Context, groupid string, name string) ApiSeekToBeginningRequest {
	return ApiSeekToBeginningRequest{
		ApiService: a,
		ctx: ctx,
		groupid: groupid,
		name: name,
	}
}

// Execute executes the request
func (a *SeekApiService) SeekToBeginningExecute(r ApiSeekToBeginningRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SeekApiService.SeekToBeginning")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/consumers/{groupid}/instances/{name}/positions/beginning"
	localVarPath = strings.Replace(localVarPath, "{"+"groupid"+"}", url.PathEscape(parameterValueToString(r.groupid, "groupid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.partitions == nil {
		return nil, reportError("partitions is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/vnd.kafka.v2+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.kafka.v2+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.partitions
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSeekToEndRequest struct {
	ctx context.Context
	ApiService *SeekApiService
	groupid string
	name string
	partitions *Partitions
}

// List of topic partitions to which the consumer is subscribed. The consumer will seek the last offset in the specified partitions.
func (r ApiSeekToEndRequest) Partitions(partitions Partitions) ApiSeekToEndRequest {
	r.partitions = &partitions
	return r
}

func (r ApiSeekToEndRequest) Execute() (*http.Response, error) {
	return r.ApiService.SeekToEndExecute(r)
}

/*
SeekToEnd Method for SeekToEnd

Configures a subscribed consumer to seek (and subsequently read from) the offset at the end of one or more of the given topic partitions.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupid ID of the consumer group to which the subscribed consumer belongs.
 @param name Name of the subscribed consumer.
 @return ApiSeekToEndRequest
*/
func (a *SeekApiService) SeekToEnd(ctx context.Context, groupid string, name string) ApiSeekToEndRequest {
	return ApiSeekToEndRequest{
		ApiService: a,
		ctx: ctx,
		groupid: groupid,
		name: name,
	}
}

// Execute executes the request
func (a *SeekApiService) SeekToEndExecute(r ApiSeekToEndRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SeekApiService.SeekToEnd")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/consumers/{groupid}/instances/{name}/positions/end"
	localVarPath = strings.Replace(localVarPath, "{"+"groupid"+"}", url.PathEscape(parameterValueToString(r.groupid, "groupid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.partitions == nil {
		return nil, reportError("partitions is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/vnd.kafka.v2+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.kafka.v2+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.partitions
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
